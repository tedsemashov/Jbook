{"ast":null,"code":"import produce from 'immer';\nimport { ActionType } from '../action-types';\nconst initialState = {\n  loading: false,\n  error: null,\n  order: [],\n  data: {}\n};\nconst reducer = produce(function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ActionType.UPDATE_CELL:\n      const {\n        id,\n        content\n      } = action.payload;\n      state.data[id].content = content;\n      return state;\n\n    case ActionType.DELETE_CELL:\n      delete state.data[action.payload];\n      state.order = state.order.filter(id => id !== action.payload);\n      return state;\n\n    case ActionType.MOVE_CELL:\n      const {\n        direction\n      } = action.payload;\n      const index = state.order.findIndex(id => id === action.payload.id);\n      const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n      if (targetIndex < 0 || targetIndex > state.order.length - 1) {\n        return state;\n      }\n\n      state.order[index] = state.order[targetIndex];\n      state.order[targetIndex] = action.payload.id;\n      return state;\n\n    case ActionType.INSERT_CELL_BEFORE:\n      const cell = {\n        content: '',\n        type: action.payload.type,\n        id: randomId()\n      };\n      state.data[cell.id] = cell;\n      const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n      if (foundIndex < 0) {\n        state.order.push(cell.id);\n      } else {\n        state.order.splice(foundIndex, 0, cell.id);\n      }\n\n      return state;\n\n    default:\n      return state;\n  }\n}, initialState);\n\nconst randomId = () => {\n  return Math.random().toString(36).substr(2, 5);\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","id","content","payload","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_BEFORE","cell","randomId","foundIndex","push","splice","Math","random","toString","substr"],"mappings":"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","sourcesContent":["import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n    loading: boolean;\n    error: string | null;\n    order: string[];\n    data: {\n        [key: string]: Cell\n    }\n}\n\nconst initialState: CellsState = {\n    loading: false,\n    error: null,\n    order: [],\n    data: {}\n}\n\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UPDATE_CELL:\n            const { id, content } = action.payload;\n            state.data[id].content = content;\n            return state;\n\n        case ActionType.DELETE_CELL:\n            delete state.data[action.payload]\n            state.order = state.order.filter(id => id !== action.payload)\n            return state;\n\n        case ActionType.MOVE_CELL:\n            const { direction } = action.payload;\n            const index = state.order.findIndex(id => id === action.payload.id);\n            const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n            if(targetIndex < 0 || targetIndex > state.order.length - 1) {\n                return state;\n            }\n\n            state.order[index] = state.order[targetIndex];\n            state.order[targetIndex] = action.payload.id;\n            return state;\n\n        case ActionType.INSERT_CELL_BEFORE:\n            const cell: Cell = {\n                content: '',\n                type: action.payload.type,\n                id: randomId()\n            };\n\n            state.data[cell.id] = cell;\n\n            const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n            if(foundIndex < 0) {\n                state.order.push(cell.id);\n            } else {\n                state.order.splice(foundIndex, 0, cell.id)\n            }\n            return state;\n\n        default:\n            return state;\n    }\n}, initialState);\n\nconst randomId = () => {\n    return Math.random().toString(36).substr(2, 5);\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}