{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/ted/Desktop/jbook/packages/local-client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import{useTypedSelector}from'./use-typed-selector';export var useCumulativeCode=function useCumulativeCode(cellId){return useTypedSelector(function(state){var _state$cells=state.cells,data=_state$cells.data,order=_state$cells.order;var orderedCells=order.map(function(id){return data[id];});var showFunc=\"\\n            import _React from 'react';\\n            import _ReactDOM from 'react-dom';\\n            \\n            var show = (value) => {\\n                const root = document.querySelector('#root');\\n            \\n                if(typeof value === 'object') {\\n                    if(value.$$typeof && value.props) {\\n                        _ReactDOM.render(value, root);\\n                    } else {\\n                        root.innerHTML = JSON.stringify(value);\\n                    }\\n                } else {\\n                    root.innerHTML = value;\\n                }\\n            };\\n       \";var showFuncNoop=\"var show = () => {}\";var cumulativeCode=[];var _iterator=_createForOfIteratorHelper(orderedCells),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var c=_step.value;if(c.type==='code'){if(c.id===cellId){cumulativeCode.push(showFunc);}else{cumulativeCode.push(showFuncNoop);}cumulativeCode.push(c.content);}if(c.id===cellId){break;}}}catch(err){_iterator.e(err);}finally{_iterator.f();}return cumulativeCode;}).join('\\n');};","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","cells","data","order","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":"4JAAA,OAASA,gBAAT,KAAiC,sBAAjC,CAEA,MAAO,IAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,MAAD,CAAoB,CACjD,MAAOF,CAAAA,gBAAgB,CAAC,SAACG,KAAD,CAAW,CAC/B,iBAAwBA,KAAK,CAACC,KAA9B,CAAQC,IAAR,cAAQA,IAAR,CAAcC,KAAd,cAAcA,KAAd,CACA,GAAMC,CAAAA,YAAY,CAAGD,KAAK,CAACE,GAAN,CAAU,SAAAC,EAAE,QAAIJ,CAAAA,IAAI,CAACI,EAAD,CAAR,EAAZ,CAArB,CACA,GAAMC,CAAAA,QAAQ,umBAAd,CAkBA,GAAMC,CAAAA,YAAY,sBAAlB,CAEA,GAAMC,CAAAA,cAAc,CAAG,EAAvB,CAvB+B,yCAwBjBL,YAxBiB,YAwB/B,+CAA4B,IAAnBM,CAAAA,CAAmB,aACxB,GAAGA,CAAC,CAACC,IAAF,GAAW,MAAd,CAAsB,CAClB,GAAGD,CAAC,CAACJ,EAAF,GAASP,MAAZ,CAAoB,CAChBU,cAAc,CAACG,IAAf,CAAoBL,QAApB,EACH,CAFD,IAEO,CACHE,cAAc,CAACG,IAAf,CAAoBJ,YAApB,EACH,CACDC,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB,EACH,CACD,GAAGH,CAAC,CAACJ,EAAF,GAASP,MAAZ,CAAoB,CAChB,MACH,CACJ,CApC8B,qDAsC/B,MAAOU,CAAAA,cAAP,CACH,CAvCsB,CAAhB,CAuCJK,IAvCI,CAuCC,IAvCD,CAAP,CAwCH,CAzCM","sourcesContent":["import { useTypedSelector } from './use-typed-selector';\n\nexport const useCumulativeCode = (cellId: string) => {\n    return useTypedSelector((state) => {\n        const { data, order } = state.cells;\n        const orderedCells = order.map(id => data[id]);\n        const showFunc = `\n            import _React from 'react';\n            import _ReactDOM from 'react-dom';\n            \n            var show = (value) => {\n                const root = document.querySelector('#root');\n            \n                if(typeof value === 'object') {\n                    if(value.$$typeof && value.props) {\n                        _ReactDOM.render(value, root);\n                    } else {\n                        root.innerHTML = JSON.stringify(value);\n                    }\n                } else {\n                    root.innerHTML = value;\n                }\n            };\n       `;\n        const showFuncNoop = `var show = () => {}`;\n\n        const cumulativeCode = [];\n        for (let c of orderedCells) {\n            if(c.type === 'code') {\n                if(c.id === cellId) {\n                    cumulativeCode.push(showFunc)\n                } else {\n                    cumulativeCode.push(showFuncNoop)\n                }\n                cumulativeCode.push(c.content)\n            }\n            if(c.id === cellId) {\n                break;\n            }\n        }\n\n        return cumulativeCode;\n    }).join('\\n');\n};\n"]},"metadata":{},"sourceType":"module"}