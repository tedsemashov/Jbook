{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useTypedSelector } from './use-typed-selector';\nexport const useCumulativeCode = cellId => {\n  _s();\n\n  return useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const showFunc = `\n            import _React from 'react';\n            import _ReactDOM from 'react-dom';\n            \n            var show = (value) => {\n                const root = document.querySelector('#root');\n            \n                if(typeof value === 'object') {\n                    if(value.$$typeof && value.props) {\n                        _ReactDOM.render(value, root);\n                    } else {\n                        root.innerHTML = JSON.stringify(value);\n                    }\n                } else {\n                    root.innerHTML = value;\n                }\n            };\n       `;\n    const showFuncNoop = `var show = () => {}`;\n    const cumulativeCode = [];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        if (c.id === cellId) {\n          cumulativeCode.push(showFunc);\n        } else {\n          cumulativeCode.push(showFuncNoop);\n        }\n\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cellId) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  }).join('\\n');\n};\n\n_s(useCumulativeCode, \"4E8l+eUOHjvoqwxLSolHjmdFz+I=\", false, function () {\n  return [useTypedSelector];\n});","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/hooks/use-cumulative-code.ts"],"names":["useTypedSelector","useCumulativeCode","cellId","state","data","order","cells","orderedCells","map","id","showFunc","showFuncNoop","cumulativeCode","c","type","push","content","join"],"mappings":";;AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,MAAD,IAAoB;AAAA;;AACjD,SAAOF,gBAAgB,CAAEG,KAAD,IAAW;AAC/B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,KAA9B;AACA,UAAMC,YAAY,GAAGF,KAAK,CAACG,GAAN,CAAUC,EAAE,IAAIL,IAAI,CAACK,EAAD,CAApB,CAArB;AACA,UAAMC,QAAQ,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAjBQ;AAkBA,UAAMC,YAAY,GAAI,qBAAtB;AAEA,UAAMC,cAAc,GAAG,EAAvB;;AACA,SAAK,IAAIC,CAAT,IAAcN,YAAd,EAA4B;AACxB,UAAGM,CAAC,CAACC,IAAF,KAAW,MAAd,EAAsB;AAClB,YAAGD,CAAC,CAACJ,EAAF,KAASP,MAAZ,EAAoB;AAChBU,UAAAA,cAAc,CAACG,IAAf,CAAoBL,QAApB;AACH,SAFD,MAEO;AACHE,UAAAA,cAAc,CAACG,IAAf,CAAoBJ,YAApB;AACH;;AACDC,QAAAA,cAAc,CAACG,IAAf,CAAoBF,CAAC,CAACG,OAAtB;AACH;;AACD,UAAGH,CAAC,CAACJ,EAAF,KAASP,MAAZ,EAAoB;AAChB;AACH;AACJ;;AAED,WAAOU,cAAP;AACH,GAvCsB,CAAhB,CAuCJK,IAvCI,CAuCC,IAvCD,CAAP;AAwCH,CAzCM;;GAAMhB,iB;UACFD,gB","sourcesContent":["import { useTypedSelector } from './use-typed-selector';\n\nexport const useCumulativeCode = (cellId: string) => {\n    return useTypedSelector((state) => {\n        const { data, order } = state.cells;\n        const orderedCells = order.map(id => data[id]);\n        const showFunc = `\n            import _React from 'react';\n            import _ReactDOM from 'react-dom';\n            \n            var show = (value) => {\n                const root = document.querySelector('#root');\n            \n                if(typeof value === 'object') {\n                    if(value.$$typeof && value.props) {\n                        _ReactDOM.render(value, root);\n                    } else {\n                        root.innerHTML = JSON.stringify(value);\n                    }\n                } else {\n                    root.innerHTML = value;\n                }\n            };\n       `;\n        const showFuncNoop = `var show = () => {}`;\n\n        const cumulativeCode = [];\n        for (let c of orderedCells) {\n            if(c.type === 'code') {\n                if(c.id === cellId) {\n                    cumulativeCode.push(showFunc)\n                } else {\n                    cumulativeCode.push(showFuncNoop)\n                }\n                cumulativeCode.push(c.content)\n            }\n            if(c.id === cellId) {\n                break;\n            }\n        }\n\n        return cumulativeCode;\n    }).join('\\n');\n};\n"]},"metadata":{},"sourceType":"module"}