{"ast":null,"code":"import axios from 'axios';\nimport localforage from 'localforage';\nconst fileCache = localforage.createInstance({\n  name: 'filecache'\n});\nexport const fetchPlugin = inputCode => {\n  return {\n    name: 'fetch-plugin',\n\n    setup(build) {\n      build.onLoad({\n        filter: /(^index\\.js$)/\n      }, () => {\n        return {\n          loader: 'jsx',\n          contents: inputCode\n        };\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        // Check to see if we have fetched this file\n        const cachedResult = await fileCache.getItem(args.path);\n\n        if (cachedResult) {\n          return cachedResult;\n        }\n      });\n      build.onLoad({\n        filter: /.css$/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const escaped = data.replace(/\\n/g, '').replace(/\"/g, '\\\\\"').replace(/'/g, \"\\\\'\"); // Trick for handling css files\n\n        const contents = `\n                    const style = document.createElement('style');\n                    style.innerText = '${escaped}';\n                    document.head.appendChild(style);\n                `;\n        const result = {\n          loader: 'jsx',\n          contents,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; // store response in cache\n\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n      build.onLoad({\n        filter: /.*/\n      }, async args => {\n        const {\n          data,\n          request\n        } = await axios.get(args.path);\n        const result = {\n          loader: 'jsx',\n          contents: data,\n          resolveDir: new URL('./', request.responseURL).pathname\n        }; // store response in cache\n\n        await fileCache.setItem(args.path, result);\n        return result;\n      });\n    }\n\n  };\n};","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/src/bundler/plugins/fetch-plugin.ts"],"names":["axios","localforage","fileCache","createInstance","name","fetchPlugin","inputCode","setup","build","onLoad","filter","loader","contents","args","cachedResult","getItem","path","data","request","get","escaped","replace","result","resolveDir","URL","responseURL","pathname","setItem"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP,MAAwB,aAAxB;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAACE,cAAZ,CAA2B;AACzCC,EAAAA,IAAI,EAAE;AADmC,CAA3B,CAAlB;AAIA,OAAO,MAAMC,WAAW,GAAIC,SAAD,IAAuB;AAC9C,SAAO;AACHF,IAAAA,IAAI,EAAE,cADH;;AAEHG,IAAAA,KAAK,CAACC,KAAD,EAA6B;AAC9BA,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAAyC,MAAM;AAC3C,eAAO;AACHC,UAAAA,MAAM,EAAE,KADL;AAEHC,UAAAA,QAAQ,EAAEN;AAFP,SAAP;AAIH,OALD;AAOAE,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA8B,MAAOG,IAAP,IAAqB;AAC/C;AACA,cAAMC,YAAY,GAAG,MAAOZ,SAAS,CAACa,OAAV,CAAwCF,IAAI,CAACG,IAA7C,CAA5B;;AAEA,YAAGF,YAAH,EAAiB;AACb,iBAAOA,YAAP;AACH;AACJ,OAPD;AASAN,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAAiC,MAAOG,IAAP,IAAqB;AAClD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AAEA,cAAMI,OAAO,GAAGH,IAAI,CACfI,OADW,CACH,KADG,EACI,EADJ,EAEXA,OAFW,CAEH,IAFG,EAEG,KAFH,EAGXA,OAHW,CAGH,IAHG,EAGG,KAHH,CAAhB,CAHkD,CAQlD;;AACA,cAAMT,QAAQ,GAAI;AAClC;AACA,yCAAyCQ,OAAQ;AACjD;AACA,iBAJgB;AAMA,cAAME,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAFiC;AAGjCW,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHd,SAArC,CAfkD,CAoBlD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACH,OAxBD;AA0BAd,MAAAA,KAAK,CAACC,MAAN,CAAa;AAAEC,QAAAA,MAAM,EAAE;AAAV,OAAb,EAA+B,MAAOG,IAAP,IAAqB;AAChD,cAAM;AAAEI,UAAAA,IAAF;AAAQC,UAAAA;AAAR,YAAoB,MAAMlB,KAAK,CAACmB,GAAN,CAAUN,IAAI,CAACG,IAAf,CAAhC;AAEA,cAAMM,MAA4B,GAAG;AACjCX,UAAAA,MAAM,EAAE,KADyB;AAEjCC,UAAAA,QAAQ,EAAEK,IAFuB;AAGjCM,UAAAA,UAAU,EAAE,IAAIC,GAAJ,CAAQ,IAAR,EAAcN,OAAO,CAACO,WAAtB,EAAmCC;AAHd,SAArC,CAHgD,CAQhD;;AACA,cAAMxB,SAAS,CAACyB,OAAV,CAAkBd,IAAI,CAACG,IAAvB,EAA6BM,MAA7B,CAAN;AAEA,eAAOA,MAAP;AACH,OAZD;AAaH;;AA1DE,GAAP;AA4DH,CA7DM","sourcesContent":["import * as esbuild from 'esbuild-wasm';\nimport axios from 'axios';\nimport localforage from 'localforage';\n\nconst fileCache = localforage.createInstance({\n    name: 'filecache'\n});\n\nexport const fetchPlugin = (inputCode: string) => {\n    return {\n        name: 'fetch-plugin',\n        setup(build: esbuild.PluginBuild) {\n            build.onLoad({ filter: /(^index\\.js$)/ },() => {\n                return {\n                    loader: 'jsx',\n                    contents: inputCode,\n                }\n            });\n\n            build.onLoad({ filter: /.*/ },async (args: any) => {\n                // Check to see if we have fetched this file\n                const cachedResult = await  fileCache.getItem<esbuild.OnLoadResult>(args.path);\n\n                if(cachedResult) {\n                    return cachedResult;\n                }\n            });\n\n            build.onLoad({ filter: /.css$/ },async (args: any) => {\n                const { data, request } = await axios.get(args.path);\n\n                const escaped = data\n                    .replace(/\\n/g, '')\n                    .replace(/\"/g, '\\\\\"')\n                    .replace(/'/g, \"\\\\'\");\n\n                // Trick for handling css files\n                const contents = `\n                    const style = document.createElement('style');\n                    style.innerText = '${escaped}';\n                    document.head.appendChild(style);\n                `;\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents,\n                    resolveDir: new URL('./', request.responseURL).pathname,\n                };\n                // store response in cache\n                await fileCache.setItem(args.path, result);\n\n                return result;\n            })\n\n            build.onLoad({ filter: /.*/ }, async (args: any) => {\n                const { data, request } = await axios.get(args.path);\n\n                const result: esbuild.OnLoadResult = {\n                    loader: 'jsx',\n                    contents: data,\n                    resolveDir: new URL('./', request.responseURL).pathname,\n                };\n                // store response in cache\n                await fileCache.setItem(args.path, result);\n\n                return result;\n            });\n        }\n    }\n}"]},"metadata":{},"sourceType":"module"}