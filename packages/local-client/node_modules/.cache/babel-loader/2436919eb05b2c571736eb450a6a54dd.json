{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport MDEditor from '@uiw/react-md-editor';\nimport './text-editor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextEditor = () => {\n  _s();\n\n  const ref = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const [value, setValue] = useState('# Header');\n  useEffect(() => {\n    const listener = event => {\n      if (ref.current && event.target && ref.current.contains(event.target)) {\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener('click', listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener('click', listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor card\",\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(MDEditor, {\n          value: value,\n          onChange: v => setValue(v || '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-editor\",\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n      source: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextEditor, \"a6oFOEIf4SMYKqUrBqu+AxnRHMo=\");\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/text-editor.tsx"],"names":["useState","useEffect","useRef","MDEditor","TextEditor","ref","editing","setEditing","value","setValue","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","v"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,mBAAP;;;AAEA,MAAMC,UAAoB,GAAG,MAAM;AAAA;;AAC/B,QAAMC,GAAG,GAAGH,MAAM,CAAwB,IAAxB,CAAlB;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,UAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMS,QAAQ,GAAIC,KAAD,IAAuB;AACpC,UAAGN,GAAG,CAACO,OAAJ,IAAeD,KAAK,CAACE,MAArB,IAA+BR,GAAG,CAACO,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAAlC,EAA8E;AAC1E;AACH;;AAEDN,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAND;;AAOAQ,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA7C;AAEA,WAAO,MAAM;AACTF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAhD;AACH,KAFD;AAGH,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAGX,OAAH,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,GAAG,EAAED,GAAvC;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAEG,KAAjB;AAAwB,UAAA,QAAQ,EAAGW,CAAD,IAAOV,QAAQ,CAACU,CAAC,IAAI,EAAN;AAAjD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAAtD;AAAA,2BACI,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,MAAM,EAAEC;AAA3B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnCD;;GAAMJ,U;;KAAAA,U;AAqCN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport MDEditor from '@uiw/react-md-editor';\nimport './text-editor.css';\n\nconst TextEditor: React.FC = () => {\n    const ref = useRef<HTMLDivElement | null>(null);\n    const [editing, setEditing] = useState(false);\n    const [value, setValue] = useState('# Header');\n\n    useEffect(() => {\n        const listener = (event: MouseEvent) => {\n            if(ref.current && event.target && ref.current.contains(event.target as Node)) {\n                return;\n            }\n\n            setEditing(false);\n        }\n        document.addEventListener('click', listener, { capture: true });\n\n        return () => {\n            document.removeEventListener('click', listener, { capture: true })\n        }\n    }, []);\n\n    if(editing) {\n        return (\n            <div className=\"text-editor card\" ref={ref}>\n                <div className=\"card-content\">\n                    <MDEditor value={value} onChange={(v) => setValue(v || '')}/>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"text-editor\" onClick={() => setEditing(true)}>\n            <MDEditor.Markdown source={value} />\n        </div>\n    )\n}\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}