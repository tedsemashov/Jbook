{"ast":null,"code":"import produce from'immer';import{ActionType}from'../action-types';var initialState={loading:false,error:null,order:[],data:{}};var reducer=produce(function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){case ActionType.UPDATE_CELL:var _action$payload=action.payload,id=_action$payload.id,content=_action$payload.content;state.data[id].content=content;return state;case ActionType.DELETE_CELL:delete state.data[action.payload];state.order=state.order.filter(function(id){return id!==action.payload;});return state;case ActionType.MOVE_CELL:var direction=action.payload.direction;var index=state.order.findIndex(function(id){return id===action.payload.id;});var targetIndex=direction==='up'?index-1:index+1;if(targetIndex<0||targetIndex>state.order.length-1){return state;}state.order[index]=state.order[targetIndex];state.order[targetIndex]=action.payload.id;return state;case ActionType.INSERT_CELL_AFTER:var cell={content:'',type:action.payload.type,id:randomId()};state.data[cell.id]=cell;var foundIndex=state.order.findIndex(function(id){return id===action.payload.id;});if(foundIndex<0){state.order.unshift(cell.id);}else{state.order.splice(foundIndex+1,0,cell.id);}return state;default:return state;}},initialState);var randomId=function randomId(){return Math.random().toString(36).substr(2,5);};export default reducer;","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/src/state/reducers/cellsReducer.ts"],"names":["produce","ActionType","initialState","loading","error","order","data","reducer","state","action","type","UPDATE_CELL","payload","id","content","DELETE_CELL","filter","MOVE_CELL","direction","index","findIndex","targetIndex","length","INSERT_CELL_AFTER","cell","randomId","foundIndex","unshift","splice","Math","random","toString","substr"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,OAApB,CACA,OAASC,UAAT,KAA2B,iBAA3B,CAaA,GAAMC,CAAAA,YAAwB,CAAG,CAC7BC,OAAO,CAAE,KADoB,CAE7BC,KAAK,CAAE,IAFsB,CAG7BC,KAAK,CAAE,EAHsB,CAI7BC,IAAI,CAAE,EAJuB,CAAjC,CAOA,GAAMC,CAAAA,OAAO,CAAGP,OAAO,CAAC,UAAsD,IAArDQ,CAAAA,KAAqD,2DAAjCN,YAAiC,IAAnBO,CAAAA,MAAmB,2CAC1E,OAAQA,MAAM,CAACC,IAAf,EACI,IAAKT,CAAAA,UAAU,CAACU,WAAhB,CACI,oBAAwBF,MAAM,CAACG,OAA/B,CAAQC,EAAR,iBAAQA,EAAR,CAAYC,OAAZ,iBAAYA,OAAZ,CACAN,KAAK,CAACF,IAAN,CAAWO,EAAX,EAAeC,OAAf,CAAyBA,OAAzB,CACA,MAAON,CAAAA,KAAP,CAEJ,IAAKP,CAAAA,UAAU,CAACc,WAAhB,CACI,MAAOP,CAAAA,KAAK,CAACF,IAAN,CAAWG,MAAM,CAACG,OAAlB,CAAP,CACAJ,KAAK,CAACH,KAAN,CAAcG,KAAK,CAACH,KAAN,CAAYW,MAAZ,CAAmB,SAAAH,EAAE,QAAIA,CAAAA,EAAE,GAAKJ,MAAM,CAACG,OAAlB,EAArB,CAAd,CACA,MAAOJ,CAAAA,KAAP,CAEJ,IAAKP,CAAAA,UAAU,CAACgB,SAAhB,CACI,GAAQC,CAAAA,SAAR,CAAsBT,MAAM,CAACG,OAA7B,CAAQM,SAAR,CACA,GAAMC,CAAAA,KAAK,CAAGX,KAAK,CAACH,KAAN,CAAYe,SAAZ,CAAsB,SAAAP,EAAE,QAAIA,CAAAA,EAAE,GAAKJ,MAAM,CAACG,OAAP,CAAeC,EAA1B,EAAxB,CAAd,CACA,GAAMQ,CAAAA,WAAW,CAAGH,SAAS,GAAK,IAAd,CAAqBC,KAAK,CAAG,CAA7B,CAAiCA,KAAK,CAAG,CAA7D,CAEA,GAAGE,WAAW,CAAG,CAAd,EAAmBA,WAAW,CAAGb,KAAK,CAACH,KAAN,CAAYiB,MAAZ,CAAqB,CAAzD,CAA4D,CACxD,MAAOd,CAAAA,KAAP,CACH,CAEDA,KAAK,CAACH,KAAN,CAAYc,KAAZ,EAAqBX,KAAK,CAACH,KAAN,CAAYgB,WAAZ,CAArB,CACAb,KAAK,CAACH,KAAN,CAAYgB,WAAZ,EAA2BZ,MAAM,CAACG,OAAP,CAAeC,EAA1C,CACA,MAAOL,CAAAA,KAAP,CAEJ,IAAKP,CAAAA,UAAU,CAACsB,iBAAhB,CACI,GAAMC,CAAAA,IAAU,CAAG,CACfV,OAAO,CAAE,EADM,CAEfJ,IAAI,CAAED,MAAM,CAACG,OAAP,CAAeF,IAFN,CAGfG,EAAE,CAAEY,QAAQ,EAHG,CAAnB,CAMAjB,KAAK,CAACF,IAAN,CAAWkB,IAAI,CAACX,EAAhB,EAAsBW,IAAtB,CAEA,GAAME,CAAAA,UAAU,CAAGlB,KAAK,CAACH,KAAN,CAAYe,SAAZ,CAAsB,SAAAP,EAAE,QAAIA,CAAAA,EAAE,GAAKJ,MAAM,CAACG,OAAP,CAAeC,EAA1B,EAAxB,CAAnB,CAEA,GAAGa,UAAU,CAAG,CAAhB,CAAmB,CACflB,KAAK,CAACH,KAAN,CAAYsB,OAAZ,CAAoBH,IAAI,CAACX,EAAzB,EACH,CAFD,IAEO,CACHL,KAAK,CAACH,KAAN,CAAYuB,MAAZ,CAAmBF,UAAU,CAAG,CAAhC,CAAmC,CAAnC,CAAsCF,IAAI,CAACX,EAA3C,EACH,CACD,MAAOL,CAAAA,KAAP,CAEJ,QACI,MAAOA,CAAAA,KAAP,CA3CR,CA6CH,CA9CsB,CA8CpBN,YA9CoB,CAAvB,CAgDA,GAAMuB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,MAAOI,CAAAA,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,MAA3B,CAAkC,CAAlC,CAAqC,CAArC,CAAP,CACH,CAFD,CAIA,cAAezB,CAAAA,OAAf","sourcesContent":["import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Cell } from '../cell';\n\ninterface CellsState {\n    loading: boolean;\n    error: string | null;\n    order: string[];\n    data: {\n        [key: string]: Cell\n    }\n}\n\nconst initialState: CellsState = {\n    loading: false,\n    error: null,\n    order: [],\n    data: {}\n}\n\nconst reducer = produce((state: CellsState = initialState, action: Action) => {\n    switch (action.type) {\n        case ActionType.UPDATE_CELL:\n            const { id, content } = action.payload;\n            state.data[id].content = content;\n            return state;\n\n        case ActionType.DELETE_CELL:\n            delete state.data[action.payload]\n            state.order = state.order.filter(id => id !== action.payload)\n            return state;\n\n        case ActionType.MOVE_CELL:\n            const { direction } = action.payload;\n            const index = state.order.findIndex(id => id === action.payload.id);\n            const targetIndex = direction === 'up' ? index - 1 : index + 1;\n\n            if(targetIndex < 0 || targetIndex > state.order.length - 1) {\n                return state;\n            }\n\n            state.order[index] = state.order[targetIndex];\n            state.order[targetIndex] = action.payload.id;\n            return state;\n\n        case ActionType.INSERT_CELL_AFTER:\n            const cell: Cell = {\n                content: '',\n                type: action.payload.type,\n                id: randomId()\n            };\n\n            state.data[cell.id] = cell;\n\n            const foundIndex = state.order.findIndex(id => id === action.payload.id);\n\n            if(foundIndex < 0) {\n                state.order.unshift(cell.id);\n            } else {\n                state.order.splice(foundIndex + 1, 0, cell.id)\n            }\n            return state;\n\n        default:\n            return state;\n    }\n}, initialState);\n\nconst randomId = () => {\n    return Math.random().toString(36).substr(2, 5);\n}\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}