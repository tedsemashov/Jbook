{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport './code-cell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles && state.bundles[cell.id]);\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cell.content);\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cell.content);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line\n  }, [cell.content, cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n        code: bundle.code,\n        err: bundle.err\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"drpAkWiXS2fQt+ooxmYouDs1MXE=\", false, function () {\n  return [useActions, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","content","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,OAAO,iBAAP;;;AAMA,MAAMC,QAAiC,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACpD,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAA+BL,UAAU,EAA/C;AACA,QAAMM,MAAM,GAAGL,gBAAgB,CAAEM,KAAD,IAAWA,KAAK,CAACC,OAAN,IAAiBD,KAAK,CAACC,OAAN,CAAcL,IAAI,CAACM,EAAnB,CAA7B,CAA/B;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG,CAACU,MAAJ,EAAY;AACRD,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACO,OAAf,CAAZ;AACA;AACH;;AAED,UAAMC,KAAK,GAAGC,UAAU,CAAC,YAAY;AACjCP,MAAAA,YAAY,CAACF,IAAI,CAACM,EAAN,EAAUN,IAAI,CAACO,OAAf,CAAZ;AACH,KAFuB,EAErB,GAFqB,CAAxB;AAIA,WAAO,MAAM;AACTG,MAAAA,YAAY,CAACF,KAAD,CAAZ;AACH,KAFD,CAVY,CAaZ;AACH,GAdQ,EAcN,CAACR,IAAI,CAACO,OAAN,EAAeP,IAAI,CAACM,EAApB,EAAwBJ,YAAxB,CAdM,CAAT;AAgBA,sBACA,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAACS,QAAAA,MAAM,EAAE,mBAAT;AAA8BC,QAAAA,OAAO,EAAE,MAAvC;AAA+CC,QAAAA,aAAa,EAAE;AAA9D,OAAZ;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACI,QAAC,UAAD;AACI,UAAA,YAAY,EAAEb,IAAI,CAACO,OADvB;AAEI,UAAA,QAAQ,EAAGO,KAAD,IAAWb,UAAU,CAACD,IAAI,CAACM,EAAN,EAAUQ,KAAV;AAFnC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,EAQQ,CAACX,MAAD,IAAWA,MAAM,CAACY,OAAlB,gBAEQ;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACI;AAAU,YAAA,SAAS,EAAC,8BAApB;AAAmD,YAAA,GAAG,EAAC,KAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAFR,gBAUM,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEZ,MAAM,CAACa,IAAtB;AAA4B,QAAA,GAAG,EAAEb,MAAM,CAACc;AAAxC;AAAA;AAAA;AAAA;AAAA,cAlBd;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAyBH,CA7CD;;GAAMlB,Q;UACmCF,U,EACtBC,gB;;;KAFbC,Q;AA+CN,eAAeA,QAAf","sourcesContent":["import { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport './code-cell.css';\n\ninterface CodeCellProps {\n    cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const { updateCell, createBundle } = useActions();\n    const bundle = useTypedSelector((state) => state.bundles && state.bundles[cell.id]);\n\n    useEffect(() => {\n        if(!bundle) {\n            createBundle(cell.id, cell.content);\n            return;\n        }\n\n        const timer = setTimeout(async () => {\n            createBundle(cell.id, cell.content)\n        }, 750);\n\n        return () => {\n            clearTimeout(timer);\n        };\n        // eslint-disable-next-line\n    }, [cell.content, cell.id, createBundle])\n\n    return (\n    <Resizable direction='vertical'>\n        <div style={{height: 'calc(100% - 10px)', display: 'flex', flexDirection: 'row'}}>\n            <Resizable direction='horizontal'>\n                <CodeEditor\n                    initialValue={cell.content}\n                    onChange={(value) => updateCell(cell.id, value)}\n                />\n            </Resizable>\n            {\n                !bundle || bundle.loading\n                    ? (\n                        <div className=\"progress-wrapper\">\n                            <div className=\"progress-cover\">\n                                <progress className=\"progress is-small is-primary\" max=\"100\">\n                                    Loading\n                                </progress>\n                            </div>\n                        </div>\n                    )\n                    : <Preview code={bundle.code} err={bundle.err} />\n            }\n        </div>\n    </Resizable>\n    )\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}