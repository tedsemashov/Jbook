{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column\n  } = position;\n  return new Position(line, column + columnOffset);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, _ref) {\n    let {\n      code,\n      reasonCode,\n      template\n    } = _ref;\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, _ref2) {\n    let {\n      code,\n      template\n    } = _ref2;\n\n    for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      params[_key2 - 2] = arguments[_key2];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      params[_key3 - 3] = arguments[_key3];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral(_ref3) {\n    let {\n      pattern,\n      flags\n    } = _ref3;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 89 && token <= 124;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 88;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 54 && token <= 124;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 54 && token <= 128;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 121 && token <= 123;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 86 && token <= 88;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 54 && token <= 88;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 37 && token <= 55;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 113 && token <= 115;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 116 && token <= 122;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 53;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[134].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 131;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref4) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref4;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(131);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(52, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 51 : 50;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 53;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 39 : 40, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(37, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 41 : 43, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else {\n      this.finishOp(42, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(49, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(48, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(45, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(48, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(46, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(44, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(38, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(26);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(129, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(127, str);\n      return;\n    }\n\n    this.finishToken(126, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(127, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(128, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(126, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(125, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(this.state.start, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start + 1, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(124, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {}\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(131) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos) {\n    let messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\"\n    };\n\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs) {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig, pos) {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])\n      }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs, pos) {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map(c => JSON.stringify(c)).join(\", \")}.`);\n    }\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n    let endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 93;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 125 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(103);\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(50)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(50)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(45)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(76)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(64)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(70)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(119)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(122)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(123)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(121)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(78)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(79)) {\n        this.next();\n\n        if (!this.isContextual(122) && !this.match(83)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(117, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(78);\n\n    if (this.eat(61)) {\n      if (this.match(64) || this.match(76)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(71) || this.isLet() || (this.isContextual(122) || this.isContextual(121)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(70) || this.match(64) || this.match(76) || this.isContextual(123)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(51) || this.match(5) || this.isContextual(121) || this.isContextual(122) || this.isContextual(123)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(104);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(122);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    } while (!this.match(46));\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(121);\n    node.extends = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(126) || this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(45) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(74)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref5) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref5;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(111)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(100)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(45)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(94) || this.isContextual(99)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(8) && !this.match(9)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(45) || this.match(10)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(83);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 74;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(74)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 45:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 125:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 81:\n      case 82:\n        node.value = this.match(81);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 49:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(126)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(127)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 126:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 127:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 80:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 74:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 51:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 83:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(121)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(41);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(41)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 124 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(49)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(121)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(76) || tokenIsIdentifier(this.state.type) || this.match(64) || this.match(70) || this.match(78)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(122)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(123)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(121)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(122) && this.lookahead().type === 51) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(117)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(124, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 46 : 45, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"TypeCastExpression\") {\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(45)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(45) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(83)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(122)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 51) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 51) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(89) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(89)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(45)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(45)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(45)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(45)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, _ref6) {\n    let {\n      enumName,\n      memberName\n    } = _ref6;\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, _ref7) {\n    let {\n      enumName,\n      memberName\n    } = _ref7;\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, _ref8) {\n    let {\n      enumName,\n      memberName\n    } = _ref8;\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, _ref9) {\n    let {\n      enumName\n    } = _ref9;\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, _ref10) {\n    let {\n      enumName,\n      suppliedType\n    } = _ref10;\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, _ref11) {\n    let {\n      enumName,\n      explicitType,\n      memberName\n    } = _ref11;\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, _ref12) {\n    let {\n      enumName,\n      memberName\n    } = _ref12;\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref13) {\n    let {\n      enumName\n    } = _ref13;\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 126:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 125:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 81:\n      case 82:\n        {\n          const literal = this.parseBooleanLiteral(this.match(81));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers(_ref14) {\n    let {\n      enumName,\n      explicitType\n    } = _ref14;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref15) {\n    let {\n      enumName\n    } = _ref15;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref16) {\n    let {\n      enumName\n    } = _ref16;\n\n    if (this.eatContextual(97)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, _ref17) {\n    let {\n      enumName,\n      nameLoc\n    } = _ref17;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(134);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(133, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(125, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(132, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(132)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 134:\n      case 125:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(52) && !this.match(135)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(52);\n    this.expect(135);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(135);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 134:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(52)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 133:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(45)) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(133)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(134)) {\n      return this.jsxParseElement();\n    } else if (this.match(45) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(134);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(135);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(134);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 52 && prevType === 134) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 134) {\n      context.push(types.j_oTag);\n    } else if (type === 135) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 52 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(51) || this.match(21) || this.match(130) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(46);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(45);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(46);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(79);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(83);\n\n    if (this.match(79)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(77);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(45)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 71) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(45)) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(45)) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(45)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(73)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(45)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(49)) {\n      return this.isContextual(114);\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(54);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(54);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(49)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(114);\n    } else if (this.eatContextual(114)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(89) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(49)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 126:\n        case 127:\n        case 125:\n        case 81:\n        case 82:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 125:\n      case 126:\n      case 127:\n      case 81:\n      case 82:\n        return this.tsParseLiteralTypeNode();\n\n      case 49:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 126 && nextToken.type !== 127) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 74:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 83:\n        return this.tsParseTypeQuery();\n\n      case 79:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 84 || type === 80) {\n            const nodeType = type === 84 ? \"TSVoidKeyword\" : type === 80 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(108);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(108) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 43);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 41);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(45)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(74)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 102) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(74)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(77)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(116) && this.lookahead().type === 73;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(73)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(46);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(77)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(107) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(105)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(112) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(95)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 64:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 76:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 71:\n          if (this.match(71) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(71);\n            this.expectContextual(118);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 70:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 105:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(76) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(125)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(45)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(45);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expect(46);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(45)) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(45)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(54) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(89)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(51) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(122) && ahead.type !== 12 && ahead.type !== 93 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(79)) {\n      this.next();\n\n      if (this.isContextual(122) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(89)) {\n      const decl = node;\n      this.expectContextual(120);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(122) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(116) && this.lookahead().type === 76;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(121)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 71) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 118) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(118);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(100) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(117);\n\n    if (isDeclare && (this.isContextual(117) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(106)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(106)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(45)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(45)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription) {\n    var _expr$extra2;\n\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(45)) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(46, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(45, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 45) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 46) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(45)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        args[_key10 - 1] = arguments[_key10];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(76)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(121)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 76);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const pos = leftOfAs.start;\n\n    if (this.isContextual(89)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(89)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(89)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n};\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(136)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(136);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(136, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 136) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(77) || this.match(136) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(61)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(136), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(93);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(50)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n    let checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n    let disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n    let strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(12)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(131)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(101)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(130) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(54) || !this.prodParam.hasIn || !this.match(54)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(54))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 37) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 39 || op === 40;\n        const coalesce = op === 38;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(40);\n        }\n\n        this.next();\n\n        if (op === 37 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 92 && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 39 || nextOp === 40) || logical && nextOp === 38) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 37:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(101)) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(53)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(92);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(68)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(85);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(50);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(130)) {\n      if (base.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.start);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 75:\n        return this.parseSuper();\n\n      case 79:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 74:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 86:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 52:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 126:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 127:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 128:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 125:\n        return this.parseStringLiteral(this.state.value);\n\n      case 80:\n        return this.parseNullLiteral();\n\n      case 81:\n        return this.parseBooleanLiteral(true);\n\n      case 82:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 64:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 76:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 73:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 130:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(50, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(42, \"^\");\n        }\n\n      case 42:\n      case 50:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 45:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(119) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 64) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 86) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(98)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(96)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(11)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(18)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(this.state.startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(start + 2, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, elemEnd, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(51));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(51);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(51);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(51)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssign = this.state.start;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = shorthandAssign;\n          }\n        } else {\n          this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 126:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 125:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 127:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 128:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 130:\n            {\n              const privateKeyPos = this.state.start + 1;\n              this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 130) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(0) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(124);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(51)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 49 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 129 || type === 52 || this.hasPlugin(\"v8intrinsic\") && type === 50;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(51);\n\n      switch (this.state.type) {\n        case 13:\n        case 131:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(19)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 130) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(124),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 131;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 56:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 59:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 60:\n        return this.parseDebuggerStatement(node);\n\n      case 86:\n        return this.parseDoStatement(node);\n\n      case 87:\n        return this.parseForStatement(node);\n\n      case 64:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 76:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 65:\n        return this.parseIfStatement(node);\n\n      case 66:\n        return this.parseReturnStatement(node);\n\n      case 67:\n        return this.parseSwitchStatement(node);\n\n      case 68:\n        return this.parseThrowStatement(node);\n\n      case 69:\n        return this.parseTryStatement(node);\n\n      case 71:\n      case 70:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 88:\n        return this.parseWhileStatement(node);\n\n      case 72:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 79:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 78:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 79) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(76);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(78)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(88);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(92)) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(95);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(70) || this.match(71) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(54) || this.isContextual(97)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(91);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(97);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(54)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(62) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(57) || this.match(61)) {\n        const isCase = this.match(57);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(58)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(63) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(67) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(54);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(29)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(54) || this.isContextual(97))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(54) || this.isContextual(97)))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(51) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(51);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(100);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(51)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(130);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(130);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(51);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(130);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(51) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(130);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 124 || type === 125) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 130) {\n      if (value === \"constructor\") {\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(77) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(61)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(51);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(89)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(91)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(64) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(76)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(71) || this.match(70) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 91 && !this.state.containsEsc || type === 95) {\n        return false;\n      }\n\n      if ((type === 122 || type === 121) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 93 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(61)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(61) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(93)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 70 || type === 71 || type === 64 || type === 76 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(122);\n      const isString = this.match(125);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(125)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(125)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(93);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(125)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(125)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(72) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(90) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(51)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(89);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(125);\n      const isMaybeTypeOnly = this.isContextual(122);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/node_modules/@babel/parser/lib/index.js"],"names":["Object","defineProperty","exports","value","lineBreak","lineBreakG","RegExp","source","isNewLine","code","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","getLineInfo","input","offset","lineStart","match","lastIndex","exec","index","createPositionWithColumnOffset","position","columnOffset","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","hasPlugin","pluginConfig","plugins","has","pluginName","pluginOptions","actualOptions","get","key","keys","getPluginOption","plugin","name","_this$plugins$get","setTrailingComments","node","comments","trailingComments","undefined","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","i","length","CommentsParser","addComment","comment","loc","state","push","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","containingNode","finalizeComment","splice","trailingNode","commentStart","charCodeAt","type","properties","arguments","params","specifiers","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","ErrorCodes","freeze","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","keepReasonCodeCompat","reasonCode","syntaxPlugin","messages","templates","forEach","template","ParserError","getLocationForPosition","pos","startLoc","lastTokStart","lastTokStartLoc","endLoc","lastTokEnd","lastTokEndLoc","raise","raiseWithData","raiseOverwrite","message","replace","_","options","errorRecovery","errors","error","assign","_raise","data","errorTemplate","errorContext","err","isLookahead","estree","superClass","parseRegExpLiteral","pattern","flags","regex","e","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","String","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","directiveLiteral","stmt","startNodeAt","expression","extra","expressionValue","raw","finishNodeAt","slice","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","isValidDirective","_stmt$expression$extr","parenthesized","parseBlockBody","args","directiveStatements","directives","map","d","body","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","kind","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","refExpressionErrors","isAssignable","isBinding","toAssignable","isLHS","toAssignableObjectExpressionProp","finishCallExpression","optional","callee","_node$arguments$","attributes","toReferencedArguments","parseExport","exported","parseSubscript","base","noCalls","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","TokContext","token","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","ExportedTokenType","label","conf","keyword","rightAssociative","binop","updateContext","keywords$1","Map","createKeyword","createToken","set","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","_options$binop","_options$beforeExpr","_options$startsExpr","_options$prefix","createKeywordLike","_options$binop2","_options$beforeExpr2","_options$startsExpr2","_options$prefix2","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","isTokenType","obj","context","pop","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","keywords","Set","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","State","curLine","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","canStartJSXElement","containsEsc","strictErrors","tokensLength","init","strictMode","sourceType","startLine","startColumn","curPosition","clone","skipArrays","val","Array","isArray","_isDigit","isDigit","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","bin","oct","dec","Token","Tokenizer","tokens","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","indexOf","skipLineComment","startSkip","ch","spaceStart","loop","attachComment","CommentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","readTemplateToken","readRadixNumber","readString","readWord","fromCodePoint","str","readRegexp","escaped","content","mods","char","includes","readInt","radix","len","forceLen","allowNumSeparator","forbiddenSiblings","allowedSiblings","invalid","total","Infinity","prev","Number","isNaN","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","recordStrictModeErrors","underscorePos","parseInt","parseFloat","readCodePoint","throwOnInvalid","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","readTemplateContinuation","unexpected","containsInvalid","inTemplate","substr","octalStr","octal","n","firstCode","escStart","identifierCheck","esc","ClassScope","privateNames","loneAccessors","ClassScopeHandler","stack","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","usePrivateName","classScope","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","recordDeclarationError","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","messageOrType","getPluginNamesFromConfigs","pluginConfigs","c","missingPlugin","JSON","stringify","expectOnePlugin","some","join","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssign","doubleProto","optionalParameters","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","bind","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","ExpressionErrors","Node","parser","ranges","range","NodePrototype","prototype","__clone","newNode","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","NodeUtils","resetStartLocation","resetEndLocation","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flow","flowPragma","shouldParseTypes","shouldParseEnums","matches","Error","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloPos","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","rest","this","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","default","isLet","suggestion","exportKind","flowParseTypeAnnotation","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","callProperties","indexers","internalSlots","endDelim","exact","inexact","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","argument","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","topLevel","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","_node$extra","toAssignableList","trailingComma","checkParams","parse","result","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","exprList","trailingCommaPos","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","left","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","contextDescription","local","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","call","shouldParseAsyncArrow","afterLeftParse","_jsx","jsx","currentContext","_jsx2","_jsx3","abort","_arrowExpression$extr","arrowExpression","maybeUnwrapTypeCastExpression","async","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewArguments","targs","parseArrowExpression","parseTopLevel","file","program","fileNode","skipFlowComment","hasFlowCommentCompletion","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","enumName","memberName","flowEnumErrorInvalidMemberName","toUpperCase","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","explicitType","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","object","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","count","entity","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","isConst","wasConst","nonNull","x","assert","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","modifier","typescript","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","hasOwnProperty","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseTypeParameter","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnToken","signature","returnTokenRequired","parameters","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","_labeledElements","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","nodeType","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","checkType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","descriptor","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","global","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","f","res","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorPos","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","modifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","_typeCast","_typeCast2","_jsx4","_typeCast3","typeCast","_typeParameters","reportReservedArrowTypeParam","toAssignableParenthesizedExpression","_expr$extra2","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","leftOfAs","rightOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","kindKey","parseModuleExportName","PlaceHolderErrors","ClassNameIsRequired","placeholders","parsePlaceholder","finishPlaceholder","isFinished","verifyBreakContinue","parseBlock","parseFunctionId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","filter","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","v8intrinsic","parseV8Intrinsic","v8IntrinsicStart","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","proposal","proposalList","tupleSyntaxIsHash","syntaxType","topicToken","tokenList","moduleAttributesVerionPluginOption","missingPlugins","mixinPlugins","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","createParenthesizedExpressions","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","last","_node$extra2","isLast","raiseRestNotLast","checkToRestConversion","arg","raiseTrailingCommaAfterRest","toReferencedListDeep","parseSpread","refNeedsArrowPos","parseRestBinding","parseObjectLike","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","_startLoc","_startPos","_left","checkClashes","disallowLetBinding","strictModeChanged","elem","invalidHackPipeBodies","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","expressions","parseMaybeAssignDisallowIn","resultError","_resultError$pos","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","_body$extra","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","sawUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","pipeProposal","parseTopicReference","lookaheadCh","codePointAt","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","tokenType","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","propertyName","innerStartPos","innerStartLoc","spreadStart","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","innerEndPos","innerEndLoc","arrowNode","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","isTail","endOffset","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","keyName","_params","privateKeyPos","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","errorPos","reservedTest","delegating","delegate","checkHackPipeBodyEarlyErrors","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","callback","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","isBreak","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","parseVar","declarations","parseForIn","startsWithAsync","isForOf","description","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","allowDirectives","createNewLexicalScope","afterBlockParse","parsedNonDirective","isForIn","await","isFor","isTypescript","statement","isHangingStatement","requireId","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStart","pushClassPrivateProperty","pushClassProperty","_member$decorators","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkNames","isDefault","isFrom","_declaration$extra","exportedName","nodes","surrogate","toString","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrs","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","_options","getParser","ast","moduleError","_unused2","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column\n  } = position;\n  return new Position(line, column + columnOffset);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\n\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, {\n    code,\n    reasonCode,\n    template\n  }, ...params) {\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, {\n    code,\n    template\n  }, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate, ...params) {\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = (superClass => class extends superClass {\n  parseRegExpLiteral({\n    pattern,\n    flags\n  }) {\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node, ...args) {\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty(...args) {\n    const propertyNode = super.parseClassProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty(...args) {\n    const propertyNode = super.parseClassPrivateProperty(...args);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop, ...args) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n});\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\nclass ExportedTokenType {\n  constructor(label, conf = {}) {\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\nconst keywords$1 = new Map();\n\nfunction createKeyword(name, options = {}) {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name, options = {}) {\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name, options = {}) {\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\nfunction tokenIsIdentifier(token) {\n  return token >= 89 && token <= 124;\n}\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 88;\n}\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 54 && token <= 124;\n}\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 54 && token <= 128;\n}\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 121 && token <= 123;\n}\nfunction tokenIsLoop(token) {\n  return token >= 86 && token <= 88;\n}\nfunction tokenIsKeyword(token) {\n  return token >= 54 && token <= 88;\n}\nfunction tokenIsOperator(token) {\n  return token >= 37 && token <= 55;\n}\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 113 && token <= 115;\n}\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 116 && token <= 122;\n}\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\nfunction tokenIsRightAssociative(token) {\n  return token === 53;\n}\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[134].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\n\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 131;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init({\n    strictMode,\n    sourceType,\n    startLine,\n    startColumn\n  }) {\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(131);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(52, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 51 : 50;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 53;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 39 : 40, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(37, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 41 : 43, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else {\n      this.finishOp(42, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(49, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(48, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(45, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(48, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(46, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(44, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(38, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(26);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(129, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen, allowNumSeparator = true) {\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(127, str);\n      return;\n    }\n\n    this.finishToken(126, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(127, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(128, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(126, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(125, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(this.state.start, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start + 1, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(124, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {}\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor(type = kExpression) {\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(131) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon(allowAsi = true) {\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace(message = \"Unexpected space.\") {\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos, messageOrType = {\n    code: ErrorCodes.SyntaxError,\n    reasonCode: \"UnexpectedToken\",\n    template: \"Unexpected token\"\n  }) {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs) {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig, pos) {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])\n      }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs, pos) {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map(c => JSON.stringify(c)).join(\", \")}.`);\n    }\n  }\n\n  tryParse(fn, oldState = this.state.clone()) {\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(inModule = this.options.sourceType === \"module\") {\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node, end = this.state.lastTokEnd, endLoc = this.state.lastTokEndLoc) {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 93;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\nvar flow = (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 125 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n\n      if (!matches) ; else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(103);\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(50)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(50)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(45)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(76)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(64)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(70)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(119)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(122)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(123)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(121)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(78)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(79)) {\n        this.next();\n\n        if (!this.isContextual(122) && !this.match(83)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(117, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(78);\n\n    if (this.eat(61)) {\n      if (this.match(64) || this.match(76)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(71) || this.isLet() || (this.isContextual(122) || this.isContextual(121)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(70) || this.match(64) || this.match(76) || this.isContextual(123)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(51) || this.match(5) || this.isContextual(121) || this.isContextual(122) || this.isContextual(123)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(104);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node, isClass = false) {\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(122);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter(requireDefault = false) {\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    } while (!this.match(46));\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(121);\n    node.extends = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(126) || this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(45) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(74)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType({\n    allowStatic,\n    allowExact,\n    allowSpread,\n    allowProto,\n    allowInexact\n  }) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(111)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(100)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(45)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(94) || this.isContextual(99)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(8) && !this.match(9)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(45) || this.match(10)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(83);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 74;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams(params = []) {\n    let rest = null;\n    let _this = null;\n\n    if (this.match(74)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 45:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 125:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 81:\n      case 82:\n        node.value = this.match(81);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 49:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(126)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(127)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 126:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 127:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 80:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 74:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 51:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 83:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(121)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(41);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(41)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 124 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(49)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody, isMethod = false) {\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(121)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(76) || tokenIsIdentifier(this.state.type) || this.match(64) || this.match(70) || this.match(78)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(122)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(123)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(121)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(122) && this.lookahead().type === 51) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(117)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(124, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 46 : 45, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr, ...args) {\n    if (expr.type !== \"TypeCastExpression\") {\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(45)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(45) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(83)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(122)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 51) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 51) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(89) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(89)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(45)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(45)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(45)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(45)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, {\n    enumName,\n    suppliedType\n  }) {\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, {\n    enumName,\n    explicitType,\n    memberName\n  }) {\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, {\n    enumName,\n    memberName\n  }) {\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, {\n    enumName\n  }) {\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 126:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 125:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 81:\n      case 82:\n        {\n          const literal = this.parseBooleanLiteral(this.match(81));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers({\n    enumName,\n    explicitType\n  }) {\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, {\n    enumName\n  }) {\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType({\n    enumName\n  }) {\n    if (this.eatContextual(97)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, {\n    enumName,\n    nameLoc\n  }) {\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n});\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = (superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(134);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(133, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(125, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(132, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(132)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 134:\n      case 125:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(52) && !this.match(135)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(52);\n    this.expect(135);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(135);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 134:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(52)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 133:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(45)) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(133)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(134)) {\n      return this.jsxParseElement();\n    } else if (this.match(45) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(134);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(135);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(134);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 52 && prevType === 134) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 134) {\n      context.push(types.j_oTag);\n    } else if (type === 135) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 52 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n});\n\nclass TypeScriptScope extends Scope {\n  constructor(...args) {\n    super(...args);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = (superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(51) || this.match(21) || this.match(130) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(46);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(45);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(46);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(79);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(83);\n\n    if (this.match(79)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(77);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(45)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 71) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(45)) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(45)) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(45)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(73)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(45)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(49)) {\n      return this.isContextual(114);\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(54);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(54);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(49)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(114);\n    } else if (this.eatContextual(114)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(89) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(49)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 126:\n        case 127:\n        case 125:\n        case 81:\n        case 82:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 125:\n      case 126:\n      case 127:\n      case 81:\n      case 82:\n        return this.tsParseLiteralTypeNode();\n\n      case 49:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 126 && nextToken.type !== 127) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 74:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 83:\n        return this.tsParseTypeQuery();\n\n      case 79:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 84 || type === 80) {\n            const nodeType = type === 84 ? \"TSVoidKeyword\" : type === 80 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(108);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(108) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 43);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 41);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(45)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(74)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 102) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(74)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(77)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(116) && this.lookahead().type === 73;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(73)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(46);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(77)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(107) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node, nested = false) {\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(105)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(112) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(95)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 64:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 76:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 71:\n          if (this.match(71) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(71);\n            this.expectContextual(118);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 70:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 105:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(76) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(125)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(45)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(45);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expect(46);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike(...args) {\n    const node = super.parseArrayLike(...args);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(45)) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(45)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(54) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(89)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(51) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(122) && ahead.type !== 12 && ahead.type !== 93 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(79)) {\n      this.next();\n\n      if (this.isContextual(122) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(89)) {\n      const decl = node;\n      this.expectContextual(120);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(122) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(116) && this.lookahead().type === 76;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(121)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 71) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 118) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(118);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(100) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(117);\n\n    if (isDeclare && (this.isContextual(117) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(106)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(106)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop, ...args) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign(...args) {\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(45)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(45)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node, isLHS = false) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription, ...args) {\n    var _expr$extra2;\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(45)) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault(...args) {\n    const node = super.parseMaybeDefault(...args);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(46, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(45, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 45) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 46) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(45)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node, ...args) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(76)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(121)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 76);\n    }\n  }\n\n  parseMethod(...args) {\n    const method = super.parseMethod(...args);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const pos = leftOfAs.start;\n\n    if (this.isContextual(89)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(89)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(89)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n});\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\nvar placeholders = (superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(136)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(136);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(136, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 136) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(77) || this.match(136) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(61)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(136), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(93);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n});\n\nvar v8intrinsic = (superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(50)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n});\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\n\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node, isLHS = false) {\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription, bindingType = BIND_NONE, checkClashes, disallowLetBinding, strictModeChanged = false) {\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(12)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(131)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(101)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(130) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(54) || !this.prodParam.hasIn || !this.match(54)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(54))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 37) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 39 || op === 40;\n        const coalesce = op === 38;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(40);\n        }\n\n        this.next();\n\n        if (op === 37 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 92 && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 39 || nextOp === 40) || logical && nextOp === 38) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 37:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(101)) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(53)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(92);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(68)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(85);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(50);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(130)) {\n      if (base.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.start);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 75:\n        return this.parseSuper();\n\n      case 79:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 74:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 86:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 52:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 126:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 127:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 128:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 125:\n        return this.parseStringLiteral(this.state.value);\n\n      case 80:\n        return this.parseNullLiteral();\n\n      case 81:\n        return this.parseBooleanLiteral(true);\n\n      case 82:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 64:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 76:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 73:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 130:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(50, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(42, \"^\");\n        }\n\n      case 42:\n      case 50:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 45:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(119) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 64) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 86) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(98)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(96)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(11)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(18)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(this.state.startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(start + 2, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, elemEnd, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(51));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(51);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(51);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(51)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssign = this.state.start;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = shorthandAssign;\n          }\n        } else {\n          this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 126:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 125:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 127:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 128:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 130:\n            {\n              const privateKeyPos = this.state.start + 1;\n              this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 130) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(0) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type, isMethod = false) {\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression, isMethod = false) {\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(124);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(51)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 49 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 129 || type === 52 || this.hasPlugin(\"v8intrinsic\") && type === 50;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(51);\n\n      switch (this.state.type) {\n        case 13:\n        case 131:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(19)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 130) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(124),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program, end = 131, sourceType = this.options.sourceType) {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 56:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 59:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 60:\n        return this.parseDebuggerStatement(node);\n\n      case 86:\n        return this.parseDoStatement(node);\n\n      case 87:\n        return this.parseForStatement(node);\n\n      case 64:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 76:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 65:\n        return this.parseIfStatement(node);\n\n      case 66:\n        return this.parseReturnStatement(node);\n\n      case 67:\n        return this.parseSwitchStatement(node);\n\n      case 68:\n        return this.parseThrowStatement(node);\n\n      case 69:\n        return this.parseTryStatement(node);\n\n      case 71:\n      case 70:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 88:\n        return this.parseWhileStatement(node);\n\n      case 72:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 79:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 78:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 79) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(76);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(78)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(88);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(92)) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(95);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(70) || this.match(71) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(54) || this.isContextual(97)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(91);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(97);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(54)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(62) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(57) || this.match(61)) {\n        const isCase = this.match(57);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(58)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(63) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(67) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(54);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(29)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(54) || this.isContextual(97))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(54) || this.isContextual(97)))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node, statement = FUNC_NO_FLAGS, isAsync = false) {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(51) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(51);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(100);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(51)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(130);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(130);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(51);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(130);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(51) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(130);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 124 || type === 125) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 130) {\n      if (value === \"constructor\") {\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId, bindingType = BIND_CLASS) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(77) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(61)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(51);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(89)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(91)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(64) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(76)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(71) || this.match(70) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 91 && !this.state.containsEsc || type === 95) {\n        return false;\n      }\n\n      if ((type === 122 || type === 121) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 93 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(61)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(61) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(93)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 70 || type === 71 || type === 64 || type === 76 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(122);\n      const isString = this.match(125);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(125)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(125)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(93);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(125)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(125)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(72) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(90) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(51)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(89);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(125);\n      const isMaybeTypeOnly = this.isContextual(122);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;\n//# sourceMappingURL=index.js.map\n"]},"metadata":{},"sourceType":"script"}