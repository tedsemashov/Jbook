{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [code, setCode] = useState('');\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      const output = await bundle(input);\n      setCode(output.code);\n      setError(output.err);\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [input]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: \"\",\n          onChange: value => setInput(value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Preview, {\n        code: code,\n        err: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"7qHYgFwgP7v8ITAvpwM7tYK+bb4=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/code-cell.tsx"],"names":["useState","useEffect","CodeEditor","Preview","bundle","Resizable","CodeCell","input","setInput","code","setCode","error","setError","timer","setTimeout","output","err","clearTimeout","height","display","flexDirection","value"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACS,IAAD,EAAOC,OAAP,IAAkBV,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,KAAK,GAAGC,UAAU,CAAC,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAMX,MAAM,CAACG,KAAD,CAA3B;AACAG,MAAAA,OAAO,CAACK,MAAM,CAACN,IAAR,CAAP;AACAG,MAAAA,QAAQ,CAACG,MAAM,CAACC,GAAR,CAAR;AACH,KAJuB,EAIrB,GAJqB,CAAxB;AAMA,WAAO,MAAM;AACTC,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAFD;AAGH,GAVQ,EAUN,CAACN,KAAD,CAVM,CAAT;AAYA,sBACA,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,UAArB;AAAA,2BACI;AAAK,MAAA,KAAK,EAAE;AAACW,QAAAA,MAAM,EAAE,MAAT;AAAiBC,QAAAA,OAAO,EAAE,MAA1B;AAAkCC,QAAAA,aAAa,EAAE;AAAjD,OAAZ;AAAA,8BACI,QAAC,SAAD;AAAW,QAAA,SAAS,EAAC,YAArB;AAAA,+BACI,QAAC,UAAD;AACI,UAAA,YAAY,EAAC,EADjB;AAEI,UAAA,QAAQ,EAAGC,KAAD,IAAWb,QAAQ,CAACa,KAAD;AAFjC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAOI,QAAC,OAAD;AAAS,QAAA,IAAI,EAAEZ,IAAf;AAAqB,QAAA,GAAG,EAAEE;AAA1B;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADA;AAaH,CA9BD;;GAAML,Q;;KAAAA,Q;AAgCN,eAAeA,QAAf","sourcesContent":["import { useState, useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\nimport Resizable from './resizable';\n\nconst CodeCell = () => {\n    const [input, setInput] = useState('');\n    const [code, setCode] = useState('');\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        const timer = setTimeout(async () => {\n            const output = await bundle(input);\n            setCode(output.code);\n            setError(output.err);\n        }, 750);\n\n        return () => {\n            clearTimeout(timer);\n        };\n    }, [input])\n\n    return (\n    <Resizable direction='vertical'>\n        <div style={{height: '100%', display: 'flex', flexDirection: 'row'}}>\n            <Resizable direction='horizontal'>\n                <CodeEditor\n                    initialValue=\"\"\n                    onChange={(value) => setInput(value)}\n                />\n            </Resizable>\n            <Preview code={code} err={error} />\n        </div>\n    </Resizable>\n    )\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}