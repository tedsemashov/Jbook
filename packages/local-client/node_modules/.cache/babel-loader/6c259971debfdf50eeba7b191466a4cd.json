{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/cell-list.tsx\",\n    _s = $RefreshSig$();\n\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CellList = () => {\n  _s();\n\n  const cells = useTypedSelector(_ref => {\n    let {\n      cells: {\n        order,\n        data\n      }\n    } = _ref;\n    return order.map(id => data[id]);\n  });\n  const renderedCells = cells.map(cell => /*#__PURE__*/_jsxDEV(CellListItem, {\n    cell: cell\n  }, cell.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 45\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderedCells\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CellList, \"ij3ho+NMbIxaBKnXgl+evU0tiZI=\", false, function () {\n  return [useTypedSelector];\n});\n\n_c = CellList;\nexport default CellList;\n\nvar _c;\n\n$RefreshReg$(_c, \"CellList\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/cell-list.tsx"],"names":["useTypedSelector","CellListItem","CellList","cells","order","data","map","id","renderedCells","cell"],"mappings":";;;AAAA,SAASA,gBAAT,QAAiC,6BAAjC;AACA,OAAOC,YAAP,MAAyB,kBAAzB;;;AAGA,MAAMC,QAAkB,GAAG,MAAM;AAAA;;AAC7B,QAAMC,KAAK,GAAGH,gBAAgB,CAAC;AAAA,QAAC;AAACG,MAAAA,KAAK,EAAE;AAAEC,QAAAA,KAAF;AAASC,QAAAA;AAAT;AAAR,KAAD;AAAA,WAA8BD,KAAK,CAACE,GAAN,CAAWC,EAAD,IAAQF,IAAI,CAACE,EAAD,CAAtB,CAA9B;AAAA,GAAD,CAA9B;AACA,QAAMC,aAAa,GAAGL,KAAK,CAACG,GAAN,CAAUG,IAAI,iBAAI,QAAC,YAAD;AAA4B,IAAA,IAAI,EAAEA;AAAlC,KAAmBA,IAAI,CAACF,EAAxB;AAAA;AAAA;AAAA;AAAA,UAAlB,CAAtB;AAEA,sBAAO;AAAA,cAAMC;AAAN;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CALD;;GAAMN,Q;UACYF,gB;;;KADZE,Q;AAON,eAAeA,QAAf","sourcesContent":["import { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from './add-cell';\n\nconst CellList: React.FC = () => {\n    const cells = useTypedSelector(({cells: { order, data }}) => order.map((id) => data[id]));\n    const renderedCells = cells.map(cell => <CellListItem key={cell.id} cell={cell} /> );\n\n    return <div>{renderedCells}</div>\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}