{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = () => {\n  _s();\n\n  const [input, setInput] = useState('');\n  const [code, setCode] = useState('');\n\n  const onClick = async () => {\n    const output = await bundle(input);\n    setCode(output);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(CodeEditor, {\n      initialValue: \"\",\n      onChange: value => setInput(value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onClick,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Preview, {\n      code: code\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n};\n\n_s(CodeCell, \"vzGklZd+2xbn0OlQKxB5t9/zfpQ=\");\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/code-cell.tsx"],"names":["useState","CodeEditor","Preview","bundle","CodeCell","input","setInput","code","setCode","onClick","output","value"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,YAAnB;;;AAGA,MAAMC,QAAQ,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMS,OAAO,GAAG,YAAY;AACxB,UAAMC,MAAM,GAAG,MAAMP,MAAM,CAACE,KAAD,CAA3B;AACAG,IAAAA,OAAO,CAACE,MAAD,CAAP;AACH,GAHD;;AAKA,sBAAO;AAAA,4BACH,QAAC,UAAD;AACI,MAAA,YAAY,EAAC,EADjB;AAEI,MAAA,QAAQ,EAAGC,KAAD,IAAWL,QAAQ,CAACK,KAAD;AAFjC;AAAA;AAAA;AAAA;AAAA,YADG,eAKH;AAAA,6BACI;AAAQ,QAAA,OAAO,EAAEF,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YALG,eAQH,QAAC,OAAD;AAAS,MAAA,IAAI,EAAEF;AAAf;AAAA;AAAA;AAAA;AAAA,YARG;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAUH,CAnBD;;GAAMH,Q;;KAAAA,Q;AAqBN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport bundle from '../bundler'\nimport Resizable from './resizable';\n\nconst CodeCell = () => {\n    const [input, setInput] = useState('');\n    const [code, setCode] = useState('');\n\n    const onClick = async () => {\n        const output = await bundle(input);\n        setCode(output);\n    };\n\n    return <div>\n        <CodeEditor\n            initialValue=\"\"\n            onChange={(value) => setInput(value)}\n        />\n        <div>\n            <button onClick={onClick}>Submit</button>\n        </div>\n        <Preview code={code} />\n    </div>\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}