{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/text-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react';\nimport MDEditor from '@uiw/react-md-editor';\nimport './text-editor.css';\nimport { useActions } from '../hooks/use-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TextEditor = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const ref = useRef(null);\n  const [editing, setEditing] = useState(false);\n  const {\n    updateCell\n  } = useActions();\n  useEffect(() => {\n    const listener = event => {\n      if (ref.current && event.target && ref.current.contains(event.target)) {\n        return;\n      }\n\n      setEditing(false);\n    };\n\n    document.addEventListener('click', listener, {\n      capture: true\n    });\n    return () => {\n      document.removeEventListener('click', listener, {\n        capture: true\n      });\n    };\n  }, []);\n\n  if (editing) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-editor card\",\n      ref: ref,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-content\",\n        children: /*#__PURE__*/_jsxDEV(MDEditor, {\n          value: cell.content,\n          onChange: v => updateCell(cell.id, v || '')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-editor\",\n    onClick: () => setEditing(true),\n    children: /*#__PURE__*/_jsxDEV(MDEditor.Markdown, {\n      source: cell.content || 'Click to edit'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TextEditor, \"qy3i4cd3e7xOxySUwxTsRLzeMEo=\", false, function () {\n  return [useActions];\n});\n\n_c = TextEditor;\nexport default TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/text-editor.tsx"],"names":["useState","useEffect","useRef","MDEditor","useActions","TextEditor","cell","ref","editing","setEditing","updateCell","listener","event","current","target","contains","document","addEventListener","capture","removeEventListener","content","v","id"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAO,mBAAP;AAEA,SAASC,UAAT,QAA2B,sBAA3B;;;AAMA,MAAMC,UAAqC,GAAG,QAAc;AAAA;;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;AACxD,QAAMC,GAAG,GAAGL,MAAM,CAAwB,IAAxB,CAAlB;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAiBN,UAAU,EAAjC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMU,QAAQ,GAAIC,KAAD,IAAuB;AACpC,UAAGL,GAAG,CAACM,OAAJ,IAAeD,KAAK,CAACE,MAArB,IAA+BP,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBH,KAAK,CAACE,MAA3B,CAAlC,EAA8E;AAC1E;AACH;;AAEDL,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAND;;AAOAO,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,EAAmCN,QAAnC,EAA6C;AAAEO,MAAAA,OAAO,EAAE;AAAX,KAA7C;AAEA,WAAO,MAAM;AACTF,MAAAA,QAAQ,CAACG,mBAAT,CAA6B,OAA7B,EAAsCR,QAAtC,EAAgD;AAAEO,QAAAA,OAAO,EAAE;AAAX,OAAhD;AACH,KAFD;AAGH,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAGV,OAAH,EAAY;AACR,wBACI;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAkC,MAAA,GAAG,EAAED,GAAvC;AAAA,6BACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI,QAAC,QAAD;AAAU,UAAA,KAAK,EAAED,IAAI,CAACc,OAAtB;AAA+B,UAAA,QAAQ,EAAGC,CAAD,IAAOX,UAAU,CAACJ,IAAI,CAACgB,EAAN,EAAUD,CAAC,IAAI,EAAf;AAA1D;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,OAAO,EAAE,MAAMZ,UAAU,CAAC,IAAD,CAAtD;AAAA,2BACI,QAAC,QAAD,CAAU,QAAV;AAAmB,MAAA,MAAM,EAAEH,IAAI,CAACc,OAAL,IAAgB;AAA3C;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAnCD;;GAAMf,U;UAGqBD,U;;;KAHrBC,U;AAqCN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect, useRef } from 'react';\nimport MDEditor from '@uiw/react-md-editor';\nimport './text-editor.css';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\n\ninterface TextEditorProps {\n    cell: Cell\n}\n\nconst TextEditor: React.FC<TextEditorProps> = ({ cell }) => {\n    const ref = useRef<HTMLDivElement | null>(null);\n    const [editing, setEditing] = useState(false);\n    const { updateCell } = useActions();\n\n    useEffect(() => {\n        const listener = (event: MouseEvent) => {\n            if(ref.current && event.target && ref.current.contains(event.target as Node)) {\n                return;\n            }\n\n            setEditing(false);\n        }\n        document.addEventListener('click', listener, { capture: true });\n\n        return () => {\n            document.removeEventListener('click', listener, { capture: true })\n        }\n    }, []);\n\n    if(editing) {\n        return (\n            <div className=\"text-editor card\" ref={ref}>\n                <div className=\"card-content\">\n                    <MDEditor value={cell.content} onChange={(v) => updateCell(cell.id, v || '')}/>\n                </div>\n            </div>\n        )\n    }\n\n    return (\n        <div className=\"text-editor\" onClick={() => setEditing(true)}>\n            <MDEditor.Markdown source={cell.content || 'Click to edit'} />\n        </div>\n    )\n}\n\nexport default TextEditor;\n"]},"metadata":{},"sourceType":"module"}