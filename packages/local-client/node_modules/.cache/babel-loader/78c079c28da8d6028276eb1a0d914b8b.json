{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/code-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport './code-cell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeCell = _ref => {\n  _s();\n\n  let {\n    cell\n  } = _ref;\n  const {\n    updateCell,\n    createBundle\n  } = useActions();\n  const bundle = useTypedSelector(state => state.bundles && state.bundles[cell.id]);\n  const cumulativeCode = useTypedSelector(state => {\n    const {\n      data,\n      order\n    } = state.cells;\n    const orderedCells = order.map(id => data[id]);\n    const cumulativeCode = [`\n            const show = (value) => {\n                if(typeof value === 'object') {\n                    if(value.$$typeof && value.props)\n                    document.querySelector('#root').innerHTML = JSON.stringify(value);\n                } else {\n                    document.querySelector('#root').innerHTML = value;\n                }\n            };\n           `];\n\n    for (let c of orderedCells) {\n      if (c.type === 'code') {\n        cumulativeCode.push(c.content);\n      }\n\n      if (c.id === cell.id) {\n        break;\n      }\n    }\n\n    return cumulativeCode;\n  });\n  useEffect(() => {\n    if (!bundle) {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n      return;\n    }\n\n    const timer = setTimeout(async () => {\n      createBundle(cell.id, cumulativeCode.join('\\n'));\n    }, 750);\n    return () => {\n      clearTimeout(timer);\n    }; // eslint-disable-next-line\n  }, [cumulativeCode.join('\\n'), cell.id, createBundle]);\n  return /*#__PURE__*/_jsxDEV(Resizable, {\n    direction: \"vertical\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 'calc(100% - 10px)',\n        display: 'flex',\n        flexDirection: 'row'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Resizable, {\n        direction: \"horizontal\",\n        children: /*#__PURE__*/_jsxDEV(CodeEditor, {\n          initialValue: cell.content,\n          onChange: value => updateCell(cell.id, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-wrapper\",\n        children: !bundle || bundle.loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-cover\",\n          children: /*#__PURE__*/_jsxDEV(\"progress\", {\n            className: \"progress is-small is-primary\",\n            max: \"100\",\n            children: \"Loading\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 37\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(Preview, {\n          code: bundle.code,\n          err: bundle.err\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CodeCell, \"r5M9pii0T6hMXRNyIRC8DN3Hi6E=\", false, function () {\n  return [useActions, useTypedSelector, useTypedSelector];\n});\n\n_c = CodeCell;\nexport default CodeCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeCell\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/code-cell.tsx"],"names":["useEffect","CodeEditor","Preview","Resizable","useActions","useTypedSelector","CodeCell","cell","updateCell","createBundle","bundle","state","bundles","id","cumulativeCode","data","order","cells","orderedCells","map","c","type","push","content","join","timer","setTimeout","clearTimeout","height","display","flexDirection","value","loading","code","err"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport CodeEditor from './code-editor';\nimport Preview from './preview';\nimport Resizable from './resizable';\nimport { Cell } from '../state';\nimport { useActions } from '../hooks/use-actions';\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport './code-cell.css';\n\ninterface CodeCellProps {\n    cell: Cell\n}\n\nconst CodeCell: React.FC<CodeCellProps> = ({ cell }) => {\n    const { updateCell, createBundle } = useActions();\n    const bundle = useTypedSelector((state) => state.bundles && state.bundles[cell.id]);\n    const cumulativeCode = useTypedSelector((state) => {\n       const { data, order } = state.cells;\n       const orderedCells = order.map(id => data[id]);\n\n       const cumulativeCode = [\n           `\n            const show = (value) => {\n                if(typeof value === 'object') {\n                    if(value.$$typeof && value.props)\n                    document.querySelector('#root').innerHTML = JSON.stringify(value);\n                } else {\n                    document.querySelector('#root').innerHTML = value;\n                }\n            };\n           `\n       ];\n       for (let c of orderedCells) {\n           if(c.type === 'code') {\n               cumulativeCode.push(c.content)\n           }\n           if(c.id === cell.id) {\n               break;\n           }\n       }\n\n       return cumulativeCode;\n    });\n\n    useEffect(() => {\n        if(!bundle) {\n            createBundle(cell.id, cumulativeCode.join('\\n'));\n            return;\n        }\n\n        const timer = setTimeout(async () => {\n            createBundle(cell.id, cumulativeCode.join('\\n'))\n        }, 750);\n\n        return () => {\n            clearTimeout(timer);\n        };\n        // eslint-disable-next-line\n    }, [cumulativeCode.join('\\n'), cell.id, createBundle])\n\n    return (\n    <Resizable direction='vertical'>\n        <div style={{height: 'calc(100% - 10px)', display: 'flex', flexDirection: 'row'}}>\n            <Resizable direction='horizontal'>\n                <CodeEditor\n                    initialValue={cell.content}\n                    onChange={(value) => updateCell(cell.id, value)}\n                />\n            </Resizable>\n            <div className=\"progress-wrapper\">\n                {\n                    !bundle || bundle.loading\n                        ? (\n                                <div className=\"progress-cover\">\n                                    <progress className=\"progress is-small is-primary\" max=\"100\">\n                                        Loading\n                                    </progress>\n                                </div>\n                        )\n                        : <Preview code={bundle.code} err={bundle.err} />\n                }\n            </div>\n        </div>\n    </Resizable>\n    )\n};\n\nexport default CodeCell;\n"]},"metadata":{},"sourceType":"module"}