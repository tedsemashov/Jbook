{"ast":null,"code":"import{Fragment}from\"react\";import{useTypedSelector}from\"../hooks/use-typed-selector\";import CellListItem from\"./cell-list-item\";import AddCell from'./add-cell';import'./cell-list.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CellList=function CellList(){var cells=useTypedSelector(function(_ref){var _ref$cells=_ref.cells,order=_ref$cells.order,data=_ref$cells.data;return order.map(function(id){return data[id];});});var renderedCells=cells.map(function(cell){return/*#__PURE__*/_jsxs(Fragment,{children:[/*#__PURE__*/_jsx(CellListItem,{cell:cell}),/*#__PURE__*/_jsx(AddCell,{previousCellId:cell.id})]},cell.id);});return/*#__PURE__*/_jsxs(\"div\",{className:\"cell-list\",children:[/*#__PURE__*/_jsx(\"div\",{className:cells.length===0?'force-visible':'',children:/*#__PURE__*/_jsx(AddCell,{previousCellId:null})}),renderedCells]});};export default CellList;","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/src/components/cell-list.tsx"],"names":["Fragment","useTypedSelector","CellListItem","AddCell","CellList","cells","order","data","map","id","renderedCells","cell","length"],"mappings":"AAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,gBAAT,KAAiC,6BAAjC,CACA,MAAOC,CAAAA,YAAP,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,OAAP,KAAoB,YAApB,CACA,MAAO,iBAAP,C,wFAEA,GAAMC,CAAAA,QAAkB,CAAG,QAArBA,CAAAA,QAAqB,EAAM,CAC7B,GAAMC,CAAAA,KAAK,CAAGJ,gBAAgB,CAAC,mCAAEI,KAAF,CAAWC,KAAX,YAAWA,KAAX,CAAkBC,IAAlB,YAAkBA,IAAlB,OAA8BD,CAAAA,KAAK,CAACE,GAAN,CAAU,SAACC,EAAD,QAAQF,CAAAA,IAAI,CAACE,EAAD,CAAZ,EAAV,CAA9B,EAAD,CAA9B,CAEA,GAAMC,CAAAA,aAAa,CAAGL,KAAK,CAACG,GAAN,CAAU,SAAAG,IAAI,qBAChC,MAAC,QAAD,yBACI,KAAC,YAAD,EAAc,IAAI,CAAEA,IAApB,EADJ,cAEI,KAAC,OAAD,EAAS,cAAc,CAAEA,IAAI,CAACF,EAA9B,EAFJ,GAAeE,IAAI,CAACF,EAApB,CADgC,EAAd,CAAtB,CAOA,mBACI,aAAK,SAAS,CAAC,WAAf,wBACI,YAAK,SAAS,CAAEJ,KAAK,CAACO,MAAN,GAAiB,CAAjB,CAAqB,eAArB,CAAuC,EAAvD,uBACI,KAAC,OAAD,EAAS,cAAc,CAAE,IAAzB,EADJ,EADJ,CAIKF,aAJL,GADJ,CAQH,CAlBD,CAoBA,cAAeN,CAAAA,QAAf","sourcesContent":["import { Fragment } from \"react\";\nimport { useTypedSelector } from \"../hooks/use-typed-selector\";\nimport CellListItem from \"./cell-list-item\";\nimport AddCell from './add-cell';\nimport './cell-list.css';\n\nconst CellList: React.FC = () => {\n    const cells = useTypedSelector(({cells: { order, data }}) => order.map((id) => data[id]));\n\n    const renderedCells = cells.map(cell => (\n        <Fragment key={cell.id}>\n            <CellListItem cell={cell} />\n            <AddCell previousCellId={cell.id} />\n        </Fragment>\n    ))\n\n    return (\n        <div className='cell-list'>\n            <div className={cells.length === 0 ? 'force-visible' : ''}>\n                <AddCell previousCellId={null}/>\n            </div>\n            {renderedCells}\n        </div>\n    )\n};\n\nexport default CellList;\n"]},"metadata":{},"sourceType":"module"}