{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/resizable.tsx\";\nimport './resizable.css';\nimport { ResizableBox } from 'react-resizable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Resizable = _ref => {\n  let {\n    direction,\n    children\n  } = _ref;\n  let resizableProps;\n\n  if (direction === 'horizontal') {\n    resizableProps = {\n      minConstraints: [window.innerWidth * 0.2, Infinity],\n      maxConstraints: [window.innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: window.innerWidth * 0.75,\n      resizeHandles: ['e']\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints: [Infinity, window.innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s']\n    };\n  }\n\n  return /*#__PURE__*/_jsxDEV(ResizableBox, { ...resizableProps,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n};\n\n_c = Resizable;\nexport default Resizable;\n\nvar _c;\n\n$RefreshReg$(_c, \"Resizable\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/resizable.tsx"],"names":["ResizableBox","Resizable","direction","children","resizableProps","minConstraints","window","innerWidth","Infinity","maxConstraints","height","width","resizeHandles","innerHeight"],"mappings":";AAAA,OAAO,iBAAP;AACA,SAASA,YAAT,QAAgD,iBAAhD;;;AAMA,MAAMC,SAAmC,GAAG,QAA6B;AAAA,MAA5B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA4B;AACvE,MAAIC,cAAJ;;AAEA,MAAIF,SAAS,KAAK,YAAlB,EAAgC;AAC9BE,IAAAA,cAAc,GAAG;AACfC,MAAAA,cAAc,EAAE,CAACC,MAAM,CAACC,UAAP,GAAoB,GAArB,EAA0BC,QAA1B,CADD;AAEfC,MAAAA,cAAc,EAAE,CAACH,MAAM,CAACC,UAAP,GAAoB,IAArB,EAA2BC,QAA3B,CAFD;AAGfE,MAAAA,MAAM,EAAEF,QAHO;AAIfG,MAAAA,KAAK,EAAEL,MAAM,CAACC,UAAP,GAAoB,IAJZ;AAKfK,MAAAA,aAAa,EAAE,CAAC,GAAD;AALA,KAAjB;AAOD,GARD,MAQO;AACLR,IAAAA,cAAc,GAAG;AACfC,MAAAA,cAAc,EAAE,CAACG,QAAD,EAAW,EAAX,CADD;AAEfC,MAAAA,cAAc,EAAE,CAACD,QAAD,EAAWF,MAAM,CAACO,WAAP,GAAqB,GAAhC,CAFD;AAGfH,MAAAA,MAAM,EAAE,GAHO;AAIfC,MAAAA,KAAK,EAAEH,QAJQ;AAKfI,MAAAA,aAAa,EAAE,CAAC,GAAD;AALA,KAAjB;AAOD;;AAED,sBAAO,QAAC,YAAD,OAAkBR,cAAlB;AAAA,cAAmCD;AAAnC;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAtBD;;KAAMF,S;AAwBN,eAAeA,SAAf","sourcesContent":["import './resizable.css';\nimport { ResizableBox, ResizableBoxProps } from 'react-resizable';\n\ninterface ResizableProps {\n  direction: 'horizontal' | 'vertical';\n}\n\nconst Resizable: React.FC<ResizableProps> = ({ direction, children }) => {\n  let resizableProps: ResizableBoxProps;\n\n  if (direction === 'horizontal') {\n    resizableProps = {\n      minConstraints: [window.innerWidth * 0.2, Infinity],\n      maxConstraints: [window.innerWidth * 0.75, Infinity],\n      height: Infinity,\n      width: window.innerWidth * 0.75,\n      resizeHandles: ['e'],\n    };\n  } else {\n    resizableProps = {\n      minConstraints: [Infinity, 24],\n      maxConstraints: [Infinity, window.innerHeight * 0.9],\n      height: 300,\n      width: Infinity,\n      resizeHandles: ['s'],\n    };\n  }\n\n  return <ResizableBox {...resizableProps}>{children}</ResizableBox>;\n};\n\nexport default Resizable;\n"]},"metadata":{},"sourceType":"module"}