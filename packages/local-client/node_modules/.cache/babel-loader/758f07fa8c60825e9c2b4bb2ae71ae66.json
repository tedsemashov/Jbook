{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/code-editor/src/components/add-cell.tsx\",\n    _s = $RefreshSig$();\n\nimport './add-cell.css';\nimport { useActions } from \"../hooks/use-actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AddCell = _ref => {\n  _s();\n\n  let {\n    nextCellId\n  } = _ref;\n  const {\n    insertCellBefore\n  } = useActions();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'code'),\n      children: \"Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => insertCellBefore(nextCellId, 'text'),\n      children: \"Text\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AddCell, \"WCeYMonidkUsrU82gdQi6l0Xt4c=\", false, function () {\n  return [useActions];\n});\n\n_c = AddCell;\nexport default AddCell;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddCell\");","map":{"version":3,"sources":["/Users/ted/Desktop/code-editor/src/components/add-cell.tsx"],"names":["useActions","AddCell","nextCellId","insertCellBefore"],"mappings":";;;AAAA,OAAO,gBAAP;AACA,SAASA,UAAT,QAA2B,sBAA3B;;;AAMA,MAAMC,OAA+B,GAAG,QAAoB;AAAA;;AAAA,MAAnB;AAAEC,IAAAA;AAAF,GAAmB;AACxD,QAAM;AAAEC,IAAAA;AAAF,MAAuBH,UAAU,EAAvC;AAEA,sBACI;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAE,MAAMG,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAE,MAAMC,gBAAgB,CAACD,UAAD,EAAa,MAAb,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CATD;;GAAMD,O;UAC2BD,U;;;KAD3BC,O;AAWN,eAAeA,OAAf","sourcesContent":["import './add-cell.css';\nimport { useActions } from \"../hooks/use-actions\";\n\ninterface AddCellProps {\n    nextCellId: string | null;\n}\n\nconst AddCell: React.FC<AddCellProps> = ({ nextCellId }) => {\n    const { insertCellBefore } = useActions();\n\n    return (\n        <div>\n            <button onClick={() => insertCellBefore(nextCellId, 'code')}>Code</button>\n            <button onClick={() => insertCellBefore(nextCellId, 'text')}>Text</button>\n        </div>\n    )\n}\n\nexport default AddCell;\n"]},"metadata":{},"sourceType":"module"}