{"ast":null,"code":"var _jsxFileName = \"/Users/ted/Desktop/jbook/packages/local-client/src/components/code-editor.tsx\",\n    _s = $RefreshSig$();\n\nimport './code-editor.css';\nimport './syntax.css';\nimport MonacoEditor from '@monaco-editor/react';\nimport { useRef } from 'react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CodeEditor = _ref => {\n  _s();\n\n  let {\n    onChange,\n    initialValue\n  } = _ref;\n  const editorRef = useRef();\n\n  const onEditorDidMount = (getValue, monacoEditor) => {\n    var _monacoEditor$getMode;\n\n    editorRef.current = monacoEditor;\n    monacoEditor.onDidChangeModelContent(() => {\n      onChange(getValue());\n    });\n    (_monacoEditor$getMode = monacoEditor.getModel()) === null || _monacoEditor$getMode === void 0 ? void 0 : _monacoEditor$getMode.updateOptions({\n      tabSize: 2\n    });\n    const highlighter = new Highlighter( // @ts-ignore\n    window.monaco, codeShift, monacoEditor);\n    highlighter.highLightOnDidChangeModelContent(() => {}, () => {}, undefined, () => {});\n  };\n\n  const onFormatCLick = () => {\n    const unformatted = editorRef.current.getModel().getValue();\n    const formatted = prettier.format(unformatted, {\n      parser: 'babel',\n      plugins: [parser],\n      useTabs: false,\n      semi: true,\n      singleQuote: true\n    }).replace(/\\n$/, '');\n    editorRef.current.setValue(formatted);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"editor-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button button-format is-primary is-small\",\n      onClick: onFormatCLick,\n      children: \"Format\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(MonacoEditor, {\n      editorDidMount: onEditorDidMount,\n      value: initialValue,\n      theme: \"dark\",\n      language: \"javascript\",\n      options: {\n        wordWrap: \"on\",\n        minimap: {\n          enabled: false\n        },\n        showUnused: false,\n        folding: false,\n        lineNumbersMinChars: 3,\n        fontSize: 16,\n        scrollBeyondLastLine: false,\n        automaticLayout: true\n      },\n      height: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }, this);\n};\n\n_s(CodeEditor, \"U23Mj2fZUVBkuOSyNtK9IkK2H0s=\");\n\n_c = CodeEditor;\nexport default CodeEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CodeEditor\");","map":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/src/components/code-editor.tsx"],"names":["MonacoEditor","useRef","prettier","parser","codeShift","Highlighter","CodeEditor","onChange","initialValue","editorRef","onEditorDidMount","getValue","monacoEditor","current","onDidChangeModelContent","getModel","updateOptions","tabSize","highlighter","window","monaco","highLightOnDidChangeModelContent","undefined","onFormatCLick","unformatted","formatted","format","plugins","useTabs","semi","singleQuote","replace","setValue","wordWrap","minimap","enabled","showUnused","folding","lineNumbersMinChars","fontSize","scrollBeyondLastLine","automaticLayout"],"mappings":";;;AAAA,OAAO,mBAAP;AACA,OAAO,cAAP;AACA,OAAOA,YAAP,MAA6C,sBAA7C;AACA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,WAAP,MAAwB,wBAAxB;;;AAOA,MAAMC,UAAqC,GAAG,QAAgC;AAAA;;AAAA,MAA/B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA+B;AAC1E,QAAMC,SAAS,GAAGR,MAAM,EAAxB;;AAEA,QAAMS,gBAAgC,GAAG,CAAEC,QAAF,EAAYC,YAAZ,KAA6B;AAAA;;AAClEH,IAAAA,SAAS,CAACI,OAAV,GAAoBD,YAApB;AACAA,IAAAA,YAAY,CAACE,uBAAb,CAAqC,MAAM;AACvCP,MAAAA,QAAQ,CAACI,QAAQ,EAAT,CAAR;AACH,KAFD;AAIA,6BAAAC,YAAY,CAACG,QAAb,kFAAyBC,aAAzB,CAAuC;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAvC;AACA,UAAMC,WAAW,GAAG,IAAIb,WAAJ,EAChB;AACAc,IAAAA,MAAM,CAACC,MAFS,EAGhBhB,SAHgB,EAIhBQ,YAJgB,CAApB;AAOAM,IAAAA,WAAW,CAACG,gCAAZ,CACI,MAAK,CAAE,CADX,EAEI,MAAK,CAAE,CAFX,EAGIC,SAHJ,EAII,MAAK,CAAE,CAJX;AAMH,GApBD;;AAsBF,QAAMC,aAAa,GAAG,MAAM;AAC1B,UAAMC,WAAW,GAAGf,SAAS,CAACI,OAAV,CAAkBE,QAAlB,GAA6BJ,QAA7B,EAApB;AACA,UAAMc,SAAS,GAAGvB,QAAQ,CAACwB,MAAT,CAAgBF,WAAhB,EAA4B;AAC1CrB,MAAAA,MAAM,EAAE,OADkC;AAE1CwB,MAAAA,OAAO,EAAE,CAACxB,MAAD,CAFiC;AAG1CyB,MAAAA,OAAO,EAAE,KAHiC;AAI1CC,MAAAA,IAAI,EAAE,IAJoC;AAK1CC,MAAAA,WAAW,EAAE;AAL6B,KAA5B,EAMfC,OANe,CAMP,KANO,EAMA,EANA,CAAlB;AAOAtB,IAAAA,SAAS,CAACI,OAAV,CAAkBmB,QAAlB,CAA2BP,SAA3B;AACD,GAVD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AACI,MAAA,SAAS,EAAC,0CADd;AAEI,MAAA,OAAO,EAAEF,aAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAII,QAAC,YAAD;AACI,MAAA,cAAc,EAAEb,gBADpB;AAEI,MAAA,KAAK,EAAEF,YAFX;AAGI,MAAA,KAAK,EAAC,MAHV;AAII,MAAA,QAAQ,EAAC,YAJb;AAKI,MAAA,OAAO,EAAE;AACLyB,QAAAA,QAAQ,EAAE,IADL;AAELC,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAFJ;AAGLC,QAAAA,UAAU,EAAE,KAHP;AAILC,QAAAA,OAAO,EAAE,KAJJ;AAKLC,QAAAA,mBAAmB,EAAE,CALhB;AAMLC,QAAAA,QAAQ,EAAE,EANL;AAOLC,QAAAA,oBAAoB,EAAE,KAPjB;AAQLC,QAAAA,eAAe,EAAE;AARZ,OALb;AAeI,MAAA,MAAM,EAAC;AAfX;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAwBD,CA7DD;;GAAMnC,U;;KAAAA,U;AA+DN,eAAeA,UAAf","sourcesContent":["import './code-editor.css';\nimport './syntax.css';\nimport MonacoEditor, { EditorDidMount } from '@monaco-editor/react';\nimport { useRef } from 'react';\nimport prettier from 'prettier';\nimport parser from 'prettier/parser-babel';\nimport codeShift from 'jscodeshift';\nimport Highlighter from 'monaco-jsx-highlighter'\n\ninterface CodeEditorProps {\n  initialValue: string,\n  onChange(value: string): void\n}\n\nconst CodeEditor: React.FC<CodeEditorProps> = ({ onChange, initialValue }) => {\n    const editorRef = useRef<any>();\n\n    const onEditorDidMount: EditorDidMount = ( getValue, monacoEditor) => {\n        editorRef.current = monacoEditor;\n        monacoEditor.onDidChangeModelContent(() => {\n            onChange(getValue())\n        });\n\n        monacoEditor.getModel()?.updateOptions({ tabSize: 2 })\n        const highlighter = new Highlighter(\n            // @ts-ignore\n            window.monaco,\n            codeShift,\n            monacoEditor\n        );\n\n        highlighter.highLightOnDidChangeModelContent(\n            () =>{},\n            () =>{},\n            undefined,\n            () =>{}\n        );\n    };\n\n  const onFormatCLick = () => {\n    const unformatted = editorRef.current.getModel().getValue();\n    const formatted = prettier.format(unformatted,{\n        parser: 'babel',\n        plugins: [parser],\n        useTabs: false,\n        semi: true,\n        singleQuote: true\n    }).replace(/\\n$/, '');\n    editorRef.current.setValue(formatted);\n  };\n\n  return (\n      <div className=\"editor-wrapper\">\n          <button\n              className=\"button button-format is-primary is-small\"\n              onClick={onFormatCLick} >Format</button>\n          <MonacoEditor\n              editorDidMount={onEditorDidMount}\n              value={initialValue}\n              theme=\"dark\"\n              language=\"javascript\"\n              options={{\n                  wordWrap: \"on\",\n                  minimap: { enabled: false },\n                  showUnused: false,\n                  folding: false,\n                  lineNumbersMinChars: 3,\n                  fontSize: 16,\n                  scrollBeyondLastLine: false,\n                  automaticLayout: true\n              }}\n              height=\"100%\"\n          />\n      </div>\n  )\n};\n\nexport default CodeEditor;\n"]},"metadata":{},"sourceType":"module"}