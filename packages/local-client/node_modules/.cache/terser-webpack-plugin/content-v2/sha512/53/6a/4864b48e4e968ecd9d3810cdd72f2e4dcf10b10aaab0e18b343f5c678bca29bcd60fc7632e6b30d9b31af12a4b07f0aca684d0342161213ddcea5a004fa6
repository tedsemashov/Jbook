{"code":"(this[\"webpackJsonpcode-editor\"]=this[\"webpackJsonpcode-editor\"]||[]).push([[320],{490:function(e,t){Prism.languages.openqasm={comment:/\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,string:{pattern:/\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,greedy:!0},keyword:/\\b(?:barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while|CX|OPENQASM|U)\\b|#pragma\\b/,\"class-name\":/\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,function:/\\b(?:sin|cos|tan|exp|ln|sqrt|rotl|rotr|popcount)\\b(?=\\s*\\()/,constant:/\\b(?:pi|tau|euler)\\b|\\u03c0|\\ud835\\udf0f|\\u2107/,number:{pattern:/(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|\\xb5s|ms|s)?/i,lookbehind:!0},operator:/->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,punctuation:/[(){}\\[\\];,:.]/},Prism.languages.qasm=Prism.languages.openqasm}}]);","name":"static/js/320.143da3a1.chunk.js","map":{"version":3,"sources":["static/js/320.143da3a1.chunk.js"],"names":["this","push","module","exports","Prism","languages","openqasm","comment","string","pattern","greedy","keyword","function","constant","number","lookbehind","operator","punctuation","qasm"],"mappings":"CAACA,KAAK,2BAA6BA,KAAK,4BAA8B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEhF,IACA,SAAUC,EAAQC,GAGxBC,MAAMC,UAAUC,SAAW,CACzBC,QAAW,0BACXC,OAAU,CACRC,QAAS,8BACTC,QAAQ,GAEVC,QAAW,+NACX,aAAc,6EACdC,SAAY,8DACZC,SAAY,kDACZC,OAAU,CACRL,QAAS,4EACTM,YAAY,GAEdC,SAAY,oDACZC,YAAe,kBAEjBb,MAAMC,UAAUa,KAAOd,MAAMC,UAAUC"},"input":"(this[\"webpackJsonpcode-editor\"] = this[\"webpackJsonpcode-editor\"] || []).push([[320],{\n\n/***/ 490:\n/***/ (function(module, exports) {\n\n// https://qiskit.github.io/openqasm/grammar/index.html\nPrism.languages.openqasm = {\n  'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n  'string': {\n    pattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n    greedy: true\n  },\n  'keyword': /\\b(?:barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while|CX|OPENQASM|U)\\b|#pragma\\b/,\n  'class-name': /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n  'function': /\\b(?:sin|cos|tan|exp|ln|sqrt|rotl|rotr|popcount)\\b(?=\\s*\\()/,\n  'constant': /\\b(?:pi|tau|euler)\\b|π|𝜏|ℇ/,\n  'number': {\n    pattern: /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n    lookbehind: true\n  },\n  'operator': /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n  'punctuation': /[(){}\\[\\];,:.]/\n};\nPrism.languages.qasm = Prism.languages.openqasm;\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/node_modules/prismjs/components/prism-openqasm.js"],"names":["Prism","languages","openqasm","pattern","greedy","lookbehind","qasm"],"mappings":";;;;;AAAA;AAEAA,KAAK,CAACC,SAAN,CAAgBC,QAAhB,GAA2B;AAC1B,aAAW,yBADe;AAE1B,YAAU;AACTC,WAAO,EAAE,6BADA;AAETC,UAAM,EAAE;AAFC,GAFgB;AAO1B,aAAW,8NAPe;AAQ1B,gBAAc,4EARY;AAS1B,cAAY,6DATc;AAW1B,cAAY,6BAXc;AAY1B,YAAU;AACTD,WAAO,EAAE,wEADA;AAETE,cAAU,EAAE;AAFH,GAZgB;AAgB1B,cAAY,mDAhBc;AAiB1B,iBAAe;AAjBW,CAA3B;AAoBAL,KAAK,CAACC,SAAN,CAAgBK,IAAhB,GAAuBN,KAAK,CAACC,SAAN,CAAgBC,QAAvC,C","file":"x","sourcesContent":["// https://qiskit.github.io/openqasm/grammar/index.html\n\nPrism.languages.openqasm = {\n\t'comment': /\\/\\*[\\s\\S]*?\\*\\/|\\/\\/.*/,\n\t'string': {\n\t\tpattern: /\"[^\"\\r\\n\\t]*\"|'[^'\\r\\n\\t]*'/,\n\t\tgreedy: true\n\t},\n\n\t'keyword': /\\b(?:barrier|boxas|boxto|break|const|continue|ctrl|def|defcal|defcalgrammar|delay|else|end|for|gate|gphase|if|in|include|inv|kernel|lengthof|let|measure|pow|reset|return|rotary|stretchinf|while|CX|OPENQASM|U)\\b|#pragma\\b/,\n\t'class-name': /\\b(?:angle|bit|bool|creg|fixed|float|int|length|qreg|qubit|stretch|uint)\\b/,\n\t'function': /\\b(?:sin|cos|tan|exp|ln|sqrt|rotl|rotr|popcount)\\b(?=\\s*\\()/,\n\n\t'constant': /\\b(?:pi|tau|euler)\\b|π|𝜏|ℇ/,\n\t'number': {\n\t\tpattern: /(^|[^.\\w$])(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?(?:dt|ns|us|µs|ms|s)?/i,\n\t\tlookbehind: true\n\t},\n\t'operator': /->|>>=?|<<=?|&&|\\|\\||\\+\\+|--|[!=<>&|~^+\\-*/%]=?|@/,\n\t'punctuation': /[(){}\\[\\];,:.]/\n};\n\nPrism.languages.qasm = Prism.languages.openqasm;\n"]}}