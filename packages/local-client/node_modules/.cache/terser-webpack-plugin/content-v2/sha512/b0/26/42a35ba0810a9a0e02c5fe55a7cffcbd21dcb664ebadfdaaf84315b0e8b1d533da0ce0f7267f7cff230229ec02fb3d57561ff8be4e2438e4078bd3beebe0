{"code":"(this[\"webpackJsonpcode-editor\"]=this[\"webpackJsonpcode-editor\"]||[]).push([[462],{632:function(e,t){!function(e){var t=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend(\"jsx\",t);var a=e.languages.tsx.tag;a.pattern=RegExp(/(^|[^\\w$]|(?=<\\/))/.source+\"(?:\"+a.pattern.source+\")\",a.pattern.flags),a.lookbehind=!0}(Prism)}}]);","name":"static/js/462.54fca405.chunk.js","map":{"version":3,"sources":["static/js/462.54fca405.chunk.js"],"names":["this","push","module","exports","Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"mappings":"CAACA,KAAK,2BAA6BA,KAAK,4BAA8B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEhF,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACT,IAAIC,EAAaD,EAAME,KAAKC,MAAMH,EAAMI,UAAUH,YAClDD,EAAMI,UAAUC,IAAML,EAAMI,UAAUE,OAAO,MAAOL,GAIpD,IAAIM,EAAMP,EAAMI,UAAUC,IAAIE,IAC9BA,EAAIC,QAAUC,OAAO,qBAAqBC,OAAS,MAAQH,EAAIC,QAAQE,OAAS,IAAKH,EAAIC,QAAQG,OACjGJ,EAAIK,YAAa,EARnB,CASGZ"},"input":"(this[\"webpackJsonpcode-editor\"] = this[\"webpackJsonpcode-editor\"] || []).push([[462],{\n\n/***/ 632:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  var typescript = Prism.util.clone(Prism.languages.typescript);\n  Prism.languages.tsx = Prism.languages.extend('jsx', typescript); // This will prevent collisions between TSX tags and TS generic types.\n  // Idea by https://github.com/karlhorky\n  // Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\n  var tag = Prism.languages.tsx.tag;\n  tag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n  tag.lookbehind = true;\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/node_modules/prismjs/components/prism-tsx.js"],"names":["Prism","typescript","util","clone","languages","tsx","extend","tag","pattern","RegExp","source","flags","lookbehind"],"mappings":";;;;;AAAC,WAAUA,KAAV,EAAiB;AACjB,MAAIC,UAAU,GAAGD,KAAK,CAACE,IAAN,CAAWC,KAAX,CAAiBH,KAAK,CAACI,SAAN,CAAgBH,UAAjC,CAAjB;AACAD,OAAK,CAACI,SAAN,CAAgBC,GAAhB,GAAsBL,KAAK,CAACI,SAAN,CAAgBE,MAAhB,CAAuB,KAAvB,EAA8BL,UAA9B,CAAtB,CAFiB,CAIjB;AACA;AACA;;AACA,MAAIM,GAAG,GAAGP,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoBE,GAA9B;AACAA,KAAG,CAACC,OAAJ,GAAcC,MAAM,CAAC,qBAAqBC,MAArB,GAA8B,KAA9B,GAAsCH,GAAG,CAACC,OAAJ,CAAYE,MAAlD,GAA2D,GAA5D,EAAiEH,GAAG,CAACC,OAAJ,CAAYG,KAA7E,CAApB;AACAJ,KAAG,CAACK,UAAJ,GAAiB,IAAjB;AACA,CAVA,EAUCZ,KAVD,CAAD,C","file":"x","sourcesContent":["(function (Prism) {\n\tvar typescript = Prism.util.clone(Prism.languages.typescript);\n\tPrism.languages.tsx = Prism.languages.extend('jsx', typescript);\n\n\t// This will prevent collisions between TSX tags and TS generic types.\n\t// Idea by https://github.com/karlhorky\n\t// Discussion: https://github.com/PrismJS/prism/issues/2594#issuecomment-710666928\n\tvar tag = Prism.languages.tsx.tag;\n\ttag.pattern = RegExp(/(^|[^\\w$]|(?=<\\/))/.source + '(?:' + tag.pattern.source + ')', tag.pattern.flags);\n\ttag.lookbehind = true;\n}(Prism));\n"]}}