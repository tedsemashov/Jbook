{"code":"(this[\"webpackJsonpcode-editor\"]=this[\"webpackJsonpcode-editor\"]||[]).push([[408],{578:function(e,t){!function(e){e.languages.sass=e.languages.extend(\"css\",{comment:{pattern:/^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,lookbehind:!0}}),e.languages.insertBefore(\"sass\",\"atrule\",{\"atrule-line\":{pattern:/^(?:[ \\t]*)[@+=].+/m,inside:{atrule:/(?:@[\\w-]+|[+=])/m}}}),delete e.languages.sass.atrule;var t=/\\$[-\\w]+|#\\{\\$[-\\w]+\\}/,n=[/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,{pattern:/(\\s)-(?=\\s)/,lookbehind:!0}];e.languages.insertBefore(\"sass\",\"property\",{\"variable-line\":{pattern:/^[ \\t]*\\$.+/m,inside:{punctuation:/:/,variable:t,operator:n}},\"property-line\":{pattern:/^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,inside:{property:[/[^:\\s]+(?=\\s*:)/,{pattern:/(:)[^:\\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:n,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore(\"sass\",\"punctuation\",{selector:{pattern:/([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,lookbehind:!0}})}(Prism)}}]);","name":"static/js/408.e581ff83.chunk.js","map":{"version":3,"sources":["static/js/408.e581ff83.chunk.js"],"names":["this","push","module","exports","Prism","languages","sass","extend","comment","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","punctuation","property","important","selector"],"mappings":"CAACA,KAAK,2BAA6BA,KAAK,4BAA8B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEhF,IACA,SAAUC,EAAQC,IAExB,SAAWC,GACTA,EAAMC,UAAUC,KAAOF,EAAMC,UAAUE,OAAO,MAAO,CAEnDC,QAAW,CACTC,QAAS,gDACTC,YAAY,KAGhBN,EAAMC,UAAUM,aAAa,OAAQ,SAAU,CAE7C,cAAe,CAEbF,QAAS,sBACTG,OAAQ,CACNC,OAAU,+BAITT,EAAMC,UAAUC,KAAKO,OAC5B,IAAIC,EAAW,yBACXC,EAAW,CAAC,2CAA4C,CAC1DN,QAAS,cACTC,YAAY,IAEdN,EAAMC,UAAUM,aAAa,OAAQ,WAAY,CAE/C,gBAAiB,CACfF,QAAS,eACTG,OAAQ,CACNI,YAAe,IACfF,SAAYA,EACZC,SAAYA,IAIhB,gBAAiB,CACfN,QAAS,qCACTG,OAAQ,CACNK,SAAY,CAAC,kBAAmB,CAC9BR,QAAS,aACTC,YAAY,IAEdM,YAAe,IACfF,SAAYA,EACZC,SAAYA,EACZG,UAAad,EAAMC,UAAUC,KAAKY,qBAIjCd,EAAMC,UAAUC,KAAKW,gBACrBb,EAAMC,UAAUC,KAAKY,UAG5Bd,EAAMC,UAAUM,aAAa,OAAQ,cAAe,CAClDQ,SAAY,CACVV,QAAS,uHACTC,YAAY,KAxDlB,CA2DGN"},"input":"(this[\"webpackJsonpcode-editor\"] = this[\"webpackJsonpcode-editor\"] || []).push([[408],{\n\n/***/ 578:\n/***/ (function(module, exports) {\n\n(function (Prism) {\n  Prism.languages.sass = Prism.languages.extend('css', {\n    // Sass comments don't need to be closed, only indented\n    'comment': {\n      pattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n      lookbehind: true\n    }\n  });\n  Prism.languages.insertBefore('sass', 'atrule', {\n    // We want to consume the whole line\n    'atrule-line': {\n      // Includes support for = and + shortcuts\n      pattern: /^(?:[ \\t]*)[@+=].+/m,\n      inside: {\n        'atrule': /(?:@[\\w-]+|[+=])/m\n      }\n    }\n  });\n  delete Prism.languages.sass.atrule;\n  var variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n  var operator = [/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/, {\n    pattern: /(\\s)-(?=\\s)/,\n    lookbehind: true\n  }];\n  Prism.languages.insertBefore('sass', 'property', {\n    // We want to consume the whole line\n    'variable-line': {\n      pattern: /^[ \\t]*\\$.+/m,\n      inside: {\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator\n      }\n    },\n    // We want to consume the whole line\n    'property-line': {\n      pattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n      inside: {\n        'property': [/[^:\\s]+(?=\\s*:)/, {\n          pattern: /(:)[^:\\s]+/,\n          lookbehind: true\n        }],\n        'punctuation': /:/,\n        'variable': variable,\n        'operator': operator,\n        'important': Prism.languages.sass.important\n      }\n    }\n  });\n  delete Prism.languages.sass.property;\n  delete Prism.languages.sass.important; // Now that whole lines for other patterns are consumed,\n  // what's left should be selectors\n\n  Prism.languages.insertBefore('sass', 'punctuation', {\n    'selector': {\n      pattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n      lookbehind: true\n    }\n  });\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/node_modules/prismjs/components/prism-sass.js"],"names":["Prism","languages","sass","extend","pattern","lookbehind","insertBefore","inside","atrule","variable","operator","important","property"],"mappings":";;;;;AAAC,WAAUA,KAAV,EAAiB;AACjBA,OAAK,CAACC,SAAN,CAAgBC,IAAhB,GAAuBF,KAAK,CAACC,SAAN,CAAgBE,MAAhB,CAAuB,KAAvB,EAA8B;AACpD;AACA,eAAW;AACVC,aAAO,EAAE,+CADC;AAEVC,gBAAU,EAAE;AAFF;AAFyC,GAA9B,CAAvB;AAQAL,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,QAArC,EAA+C;AAC9C;AACA,mBAAe;AACd;AACAF,aAAO,EAAE,qBAFK;AAGdG,YAAM,EAAE;AACP,kBAAU;AADH;AAHM;AAF+B,GAA/C;AAUA,SAAOP,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBM,MAA5B;AAGA,MAAIC,QAAQ,GAAG,wBAAf;AACA,MAAIC,QAAQ,GAAG,CACd,0CADc,EAEd;AACCN,WAAO,EAAE,aADV;AAECC,cAAU,EAAE;AAFb,GAFc,CAAf;AAQAL,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,UAArC,EAAiD;AAChD;AACA,qBAAiB;AAChBF,aAAO,EAAE,cADO;AAEhBG,YAAM,EAAE;AACP,uBAAe,GADR;AAEP,oBAAYE,QAFL;AAGP,oBAAYC;AAHL;AAFQ,KAF+B;AAUhD;AACA,qBAAiB;AAChBN,aAAO,EAAE,oCADO;AAEhBG,YAAM,EAAE;AACP,oBAAY,CACX,iBADW,EAEX;AACCH,iBAAO,EAAE,YADV;AAECC,oBAAU,EAAE;AAFb,SAFW,CADL;AAQP,uBAAe,GARR;AASP,oBAAYI,QATL;AAUP,oBAAYC,QAVL;AAWP,qBAAaV,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBS;AAX3B;AAFQ;AAX+B,GAAjD;AA4BA,SAAOX,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBU,QAA5B;AACA,SAAOZ,KAAK,CAACC,SAAN,CAAgBC,IAAhB,CAAqBS,SAA5B,CA5DiB,CA8DjB;AACA;;AACAX,OAAK,CAACC,SAAN,CAAgBK,YAAhB,CAA6B,MAA7B,EAAqC,aAArC,EAAoD;AACnD,gBAAY;AACXF,aAAO,EAAE,sHADE;AAEXC,gBAAU,EAAE;AAFD;AADuC,GAApD;AAOA,CAvEA,EAuECL,KAvED,CAAD,C","file":"x","sourcesContent":["(function (Prism) {\n\tPrism.languages.sass = Prism.languages.extend('css', {\n\t\t// Sass comments don't need to be closed, only indented\n\t\t'comment': {\n\t\t\tpattern: /^([ \\t]*)\\/[\\/*].*(?:(?:\\r?\\n|\\r)\\1[ \\t].+)*/m,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('sass', 'atrule', {\n\t\t// We want to consume the whole line\n\t\t'atrule-line': {\n\t\t\t// Includes support for = and + shortcuts\n\t\t\tpattern: /^(?:[ \\t]*)[@+=].+/m,\n\t\t\tinside: {\n\t\t\t\t'atrule': /(?:@[\\w-]+|[+=])/m\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.atrule;\n\n\n\tvar variable = /\\$[-\\w]+|#\\{\\$[-\\w]+\\}/;\n\tvar operator = [\n\t\t/[+*\\/%]|[=!]=|<=?|>=?|\\b(?:and|or|not)\\b/,\n\t\t{\n\t\t\tpattern: /(\\s)-(?=\\s)/,\n\t\t\tlookbehind: true\n\t\t}\n\t];\n\n\tPrism.languages.insertBefore('sass', 'property', {\n\t\t// We want to consume the whole line\n\t\t'variable-line': {\n\t\t\tpattern: /^[ \\t]*\\$.+/m,\n\t\t\tinside: {\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator\n\t\t\t}\n\t\t},\n\t\t// We want to consume the whole line\n\t\t'property-line': {\n\t\t\tpattern: /^[ \\t]*(?:[^:\\s]+ *:.*|:[^:\\s].*)/m,\n\t\t\tinside: {\n\t\t\t\t'property': [\n\t\t\t\t\t/[^:\\s]+(?=\\s*:)/,\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /(:)[^:\\s]+/,\n\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /:/,\n\t\t\t\t'variable': variable,\n\t\t\t\t'operator': operator,\n\t\t\t\t'important': Prism.languages.sass.important\n\t\t\t}\n\t\t}\n\t});\n\tdelete Prism.languages.sass.property;\n\tdelete Prism.languages.sass.important;\n\n\t// Now that whole lines for other patterns are consumed,\n\t// what's left should be selectors\n\tPrism.languages.insertBefore('sass', 'punctuation', {\n\t\t'selector': {\n\t\t\tpattern: /([ \\t]*)\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*(?:,(?:\\r?\\n|\\r)\\1[ \\t]+\\S(?:,[^,\\r\\n]+|[^,\\r\\n]*)(?:,[^,\\r\\n]+)*)*/,\n\t\t\tlookbehind: true\n\t\t}\n\t});\n\n}(Prism));\n"]}}