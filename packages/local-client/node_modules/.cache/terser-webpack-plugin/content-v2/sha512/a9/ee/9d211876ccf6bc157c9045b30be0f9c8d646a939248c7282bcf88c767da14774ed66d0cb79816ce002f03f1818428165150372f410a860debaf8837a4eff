{"code":"(this[\"webpackJsonpcode-editor\"]=this[\"webpackJsonpcode-editor\"]||[]).push([[174],{344:function(e,t){!function(e){e.languages.haml={\"multiline-comment\":{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,lookbehind:!0,alias:\"comment\"},\"multiline-code\":[{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,lookbehind:!0,inside:e.languages.ruby},{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,lookbehind:!0,inside:e.languages.ruby}],filter:{pattern:/((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"}}},markup:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,lookbehind:!0,inside:e.languages.markup},doctype:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,lookbehind:!0},tag:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,lookbehind:!0,inside:{attributes:[{pattern:/(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,lookbehind:!0,inside:e.languages.ruby},{pattern:/\\([^)]+\\)/,inside:{\"attr-value\":{pattern:/(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,lookbehind:!0},\"attr-name\":/[\\w:-]+(?=\\s*!?=|\\s*[,)])/,punctuation:/[=(),]/}},{pattern:/\\[[^\\]]+\\]/,inside:e.languages.ruby}],punctuation:/[<>]/}},code:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,lookbehind:!0,inside:e.languages.ruby},interpolation:{pattern:/#\\{[^}]+\\}/,inside:{delimiter:{pattern:/^#\\{|\\}$/,alias:\"punctuation\"},rest:e.languages.ruby}},punctuation:{pattern:/((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,lookbehind:!0}};for(var t=[\"css\",{filter:\"coffee\",language:\"coffeescript\"},\"erb\",\"javascript\",\"less\",\"markdown\",\"ruby\",\"scss\",\"textile\"],n={},r=0,a=t.length;r<a;r++){var i=t[r];i=\"string\"===typeof i?{filter:i,language:i}:i,e.languages[i.language]&&(n[\"filter-\"+i.filter]={pattern:RegExp(\"((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+\".replace(\"{{filter_name}}\",(function(){return i.filter}))),lookbehind:!0,inside:{\"filter-name\":{pattern:/^:[\\w-]+/,alias:\"variable\"},rest:e.languages[i.language]}})}e.languages.insertBefore(\"haml\",\"filter\",n)}(Prism)}}]);","name":"static/js/174.ae19775c.chunk.js","map":{"version":3,"sources":["static/js/174.ae19775c.chunk.js"],"names":["this","push","module","exports","Prism","languages","haml","pattern","lookbehind","alias","inside","ruby","filter","markup","doctype","tag","attributes","punctuation","code","interpolation","delimiter","rest","filters","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"CAACA,KAAK,2BAA6BA,KAAK,4BAA8B,IAAIC,KAAK,CAAC,CAAC,KAAK,CAEhF,IACA,SAAUC,EAAQC,IAQxB,SAAWC,GACTA,EAAMC,UAAUC,KAAO,CAErB,oBAAqB,CACnBC,QAAS,gEACTC,YAAY,EACZC,MAAO,WAET,iBAAkB,CAAC,CACjBF,QAAS,6GACTC,YAAY,EACZE,OAAQN,EAAMC,UAAUM,MACvB,CACDJ,QAAS,sFACTC,YAAY,EACZE,OAAQN,EAAMC,UAAUM,OAG1BC,OAAU,CACRL,QAAS,iFACTC,YAAY,EACZE,OAAQ,CACN,cAAe,CACbH,QAAS,WACTE,MAAO,cAIbI,OAAU,CACRN,QAAS,4BACTC,YAAY,EACZE,OAAQN,EAAMC,UAAUQ,QAE1BC,QAAW,CACTP,QAAS,oCACTC,YAAY,GAEdO,IAAO,CAELR,QAAS,sGACTC,YAAY,EACZE,OAAQ,CACNM,WAAc,CAAC,CAGbT,QAAS,mCACTC,YAAY,EACZE,OAAQN,EAAMC,UAAUM,MACvB,CACDJ,QAAS,YACTG,OAAQ,CACN,aAAc,CACZH,QAAS,0CACTC,YAAY,GAEd,YAAa,4BACbS,YAAe,WAEhB,CACDV,QAAS,aACTG,OAAQN,EAAMC,UAAUM,OAE1BM,YAAe,SAGnBC,KAAQ,CACNX,QAAS,0CACTC,YAAY,EACZE,OAAQN,EAAMC,UAAUM,MAG1BQ,cAAiB,CACfZ,QAAS,aACTG,OAAQ,CACNU,UAAa,CACXb,QAAS,WACTE,MAAO,eAETY,KAAMjB,EAAMC,UAAUM,OAG1BM,YAAe,CACbV,QAAS,kCACTC,YAAY,IAWhB,IARA,IAEIc,EAAU,CAAC,MAAO,CACpBV,OAAQ,SACRW,SAAU,gBACT,MAAO,aAAc,OAAQ,WAAY,OAAQ,OAAQ,WACxDC,EAAc,GAETC,EAAI,EAAGC,EAAIJ,EAAQK,OAAQF,EAAIC,EAAGD,IAAK,CAC9C,IAAIb,EAASU,EAAQG,GACrBb,EAA2B,kBAAXA,EAAsB,CACpCA,OAAQA,EACRW,SAAUX,GACRA,EAEAR,EAAMC,UAAUO,EAAOW,YACzBC,EAAY,UAAYZ,EAAOA,QAAU,CACvCL,QAASqB,OAjBM,uGAiBgBC,QAAQ,mBAAmB,WACxD,OAAOjB,EAAOA,WAEhBJ,YAAY,EACZE,OAAQ,CACN,cAAe,CACbH,QAAS,WACTE,MAAO,YAETY,KAAMjB,EAAMC,UAAUO,EAAOW,aAMrCnB,EAAMC,UAAUyB,aAAa,OAAQ,SAAUN,GAtHjD,CAuHGpB"},"input":"(this[\"webpackJsonpcode-editor\"] = this[\"webpackJsonpcode-editor\"] || []).push([[174],{\n\n/***/ 344:\n/***/ (function(module, exports) {\n\n/* TODO\n\tHandle multiline code after tag\n\t    %foo= some |\n\t\t\tmultiline |\n\t\t\tcode |\n*/\n(function (Prism) {\n  Prism.languages.haml = {\n    // Multiline stuff should appear before the rest\n    'multiline-comment': {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n      lookbehind: true,\n      alias: 'comment'\n    },\n    'multiline-code': [{\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n      lookbehind: true,\n      inside: Prism.languages.ruby\n    }, {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n      lookbehind: true,\n      inside: Prism.languages.ruby\n    }],\n    // See at the end of the file for known filters\n    'filter': {\n      pattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n      lookbehind: true,\n      inside: {\n        'filter-name': {\n          pattern: /^:[\\w-]+/,\n          alias: 'variable'\n        }\n      }\n    },\n    'markup': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n      lookbehind: true,\n      inside: Prism.languages.markup\n    },\n    'doctype': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n      lookbehind: true\n    },\n    'tag': {\n      // Allows for one nested group of braces\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n      lookbehind: true,\n      inside: {\n        'attributes': [{\n          // Lookbehind tries to prevent interpolations from breaking it all\n          // Allows for one nested group of braces\n          pattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n          lookbehind: true,\n          inside: Prism.languages.ruby\n        }, {\n          pattern: /\\([^)]+\\)/,\n          inside: {\n            'attr-value': {\n              pattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n              lookbehind: true\n            },\n            'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n            'punctuation': /[=(),]/\n          }\n        }, {\n          pattern: /\\[[^\\]]+\\]/,\n          inside: Prism.languages.ruby\n        }],\n        'punctuation': /[<>]/\n      }\n    },\n    'code': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n      lookbehind: true,\n      inside: Prism.languages.ruby\n    },\n    // Interpolations in plain text\n    'interpolation': {\n      pattern: /#\\{[^}]+\\}/,\n      inside: {\n        'delimiter': {\n          pattern: /^#\\{|\\}$/,\n          alias: 'punctuation'\n        },\n        rest: Prism.languages.ruby\n      }\n    },\n    'punctuation': {\n      pattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n      lookbehind: true\n    }\n  };\n  var filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+'; // Non exhaustive list of available filters and associated languages\n\n  var filters = ['css', {\n    filter: 'coffee',\n    language: 'coffeescript'\n  }, 'erb', 'javascript', 'less', 'markdown', 'ruby', 'scss', 'textile'];\n  var all_filters = {};\n\n  for (var i = 0, l = filters.length; i < l; i++) {\n    var filter = filters[i];\n    filter = typeof filter === 'string' ? {\n      filter: filter,\n      language: filter\n    } : filter;\n\n    if (Prism.languages[filter.language]) {\n      all_filters['filter-' + filter.filter] = {\n        pattern: RegExp(filter_pattern.replace('{{filter_name}}', function () {\n          return filter.filter;\n        })),\n        lookbehind: true,\n        inside: {\n          'filter-name': {\n            pattern: /^:[\\w-]+/,\n            alias: 'variable'\n          },\n          rest: Prism.languages[filter.language]\n        }\n      };\n    }\n  }\n\n  Prism.languages.insertBefore('haml', 'filter', all_filters);\n})(Prism);\n\n/***/ })\n\n}]);","inputSourceMap":{"version":3,"sources":["/Users/ted/Desktop/jbook/packages/local-client/node_modules/prismjs/components/prism-haml.js"],"names":["Prism","languages","haml","pattern","lookbehind","alias","inside","ruby","markup","rest","filter_pattern","filters","filter","language","all_filters","i","l","length","RegExp","replace","insertBefore"],"mappings":"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","file":"x","sourcesContent":["/* TODO\n\tHandle multiline code after tag\n\t    %foo= some |\n\t\t\tmultiline |\n\t\t\tcode |\n*/\n\n(function (Prism) {\n\n\tPrism.languages.haml = {\n\t\t// Multiline stuff should appear before the rest\n\n\t\t'multiline-comment': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*))(?:\\/|-#).*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)*/,\n\t\t\tlookbehind: true,\n\t\t\talias: 'comment'\n\t\t},\n\n\t\t'multiline-code': [\n\t\t\t{\n\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*,[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*,[\\t ]*)*(?:(?:\\r?\\n|\\r)\\2[\\t ].+)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: Prism.languages.ruby\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)(?:[~-]|[&!]?=)).*\\|[\\t ]*(?:(?:\\r?\\n|\\r)\\2[\\t ].*\\|[\\t ]*)*/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: Prism.languages.ruby\n\t\t\t}\n\t\t],\n\n\t\t// See at the end of the file for known filters\n\t\t'filter': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)([\\t ]*)):[\\w-]+(?:(?:\\r?\\n|\\r)(?:\\2[\\t ].+|\\s*?(?=\\r?\\n|\\r)))+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'filter-name': {\n\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\talias: 'variable'\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t'markup': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)<.+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.markup\n\t\t},\n\t\t'doctype': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)!!!(?: .+)?/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'tag': {\n\t\t\t// Allows for one nested group of braces\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[%.#][\\w\\-#.]*[\\w\\-](?:\\([^)]+\\)|\\{(?:\\{[^}]+\\}|[^{}])+\\}|\\[[^\\]]+\\])*[\\/<>]*/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'attributes': [\n\t\t\t\t\t{\n\t\t\t\t\t\t// Lookbehind tries to prevent interpolations from breaking it all\n\t\t\t\t\t\t// Allows for one nested group of braces\n\t\t\t\t\t\tpattern: /(^|[^#])\\{(?:\\{[^}]+\\}|[^{}])+\\}/,\n\t\t\t\t\t\tlookbehind: true,\n\t\t\t\t\t\tinside: Prism.languages.ruby\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /\\([^)]+\\)/,\n\t\t\t\t\t\tinside: {\n\t\t\t\t\t\t\t'attr-value': {\n\t\t\t\t\t\t\t\tpattern: /(=\\s*)(?:\"(?:\\\\.|[^\\\\\"\\r\\n])*\"|[^)\\s]+)/,\n\t\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'attr-name': /[\\w:-]+(?=\\s*!?=|\\s*[,)])/,\n\t\t\t\t\t\t\t'punctuation': /[=(),]/\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tpattern: /\\[[^\\]]+\\]/,\n\t\t\t\t\t\tinside: Prism.languages.ruby\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t'punctuation': /[<>]/\n\t\t\t}\n\t\t},\n\t\t'code': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*(?:[~-]|[&!]?=)).+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.ruby\n\t\t},\n\t\t// Interpolations in plain text\n\t\t'interpolation': {\n\t\t\tpattern: /#\\{[^}]+\\}/,\n\t\t\tinside: {\n\t\t\t\t'delimiter': {\n\t\t\t\t\tpattern: /^#\\{|\\}$/,\n\t\t\t\t\talias: 'punctuation'\n\t\t\t\t},\n\t\t\t\trest: Prism.languages.ruby\n\t\t\t}\n\t\t},\n\t\t'punctuation': {\n\t\t\tpattern: /((?:^|\\r?\\n|\\r)[\\t ]*)[~=\\-&!]+/,\n\t\t\tlookbehind: true\n\t\t}\n\t};\n\n\tvar filter_pattern = '((?:^|\\\\r?\\\\n|\\\\r)([\\\\t ]*)):{{filter_name}}(?:(?:\\\\r?\\\\n|\\\\r)(?:\\\\2[\\\\t ].+|\\\\s*?(?=\\\\r?\\\\n|\\\\r)))+';\n\n\t// Non exhaustive list of available filters and associated languages\n\tvar filters = [\n\t\t'css',\n\t\t{ filter: 'coffee', language: 'coffeescript' },\n\t\t'erb',\n\t\t'javascript',\n\t\t'less',\n\t\t'markdown',\n\t\t'ruby',\n\t\t'scss',\n\t\t'textile'\n\t];\n\tvar all_filters = {};\n\tfor (var i = 0, l = filters.length; i < l; i++) {\n\t\tvar filter = filters[i];\n\t\tfilter = typeof filter === 'string' ? { filter: filter, language: filter } : filter;\n\t\tif (Prism.languages[filter.language]) {\n\t\t\tall_filters['filter-' + filter.filter] = {\n\t\t\t\tpattern: RegExp(filter_pattern.replace('{{filter_name}}', function () { return filter.filter; })),\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'filter-name': {\n\t\t\t\t\t\tpattern: /^:[\\w-]+/,\n\t\t\t\t\t\talias: 'variable'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages[filter.language]\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tPrism.languages.insertBefore('haml', 'filter', all_filters);\n\n}(Prism));\n"]}}